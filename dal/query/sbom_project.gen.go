// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newSBOMProject(db *gorm.DB, opts ...gen.DOOption) sBOMProject {
	_sBOMProject := sBOMProject{}

	_sBOMProject.sBOMProjectDo.UseDB(db, opts...)
	_sBOMProject.sBOMProjectDo.UseModel(&model.SBOMProject{})

	tableName := _sBOMProject.sBOMProjectDo.TableName()
	_sBOMProject.ALL = field.NewAsterisk(tableName)
	_sBOMProject.ID = field.NewInt64(tableName, "id")
	_sBOMProject.MinionID = field.NewInt64(tableName, "minion_id")
	_sBOMProject.Inet = field.NewString(tableName, "inet")
	_sBOMProject.Filepath = field.NewString(tableName, "filepath")
	_sBOMProject.SHA1 = field.NewString(tableName, "sha1")
	_sBOMProject.Size = field.NewInt(tableName, "size")
	_sBOMProject.ComponentNum = field.NewInt(tableName, "component_num")
	_sBOMProject.PID = field.NewInt(tableName, "pid")
	_sBOMProject.Exe = field.NewString(tableName, "exe")
	_sBOMProject.Username = field.NewString(tableName, "username")
	_sBOMProject.ModifyAt = field.NewTime(tableName, "modify_at")
	_sBOMProject.CriticalNum = field.NewInt(tableName, "critical_num")
	_sBOMProject.CriticalScore = field.NewFloat64(tableName, "critical_score")
	_sBOMProject.HighNum = field.NewInt(tableName, "high_num")
	_sBOMProject.HighScore = field.NewFloat64(tableName, "high_score")
	_sBOMProject.MediumNum = field.NewInt(tableName, "medium_num")
	_sBOMProject.MediumScore = field.NewFloat64(tableName, "medium_score")
	_sBOMProject.LowNum = field.NewInt(tableName, "low_num")
	_sBOMProject.LowScore = field.NewFloat64(tableName, "low_score")
	_sBOMProject.TotalNum = field.NewInt(tableName, "total_num")
	_sBOMProject.TotalScore = field.NewFloat64(tableName, "total_score")
	_sBOMProject.Nonce = field.NewInt64(tableName, "nonce")
	_sBOMProject.CreatedAt = field.NewTime(tableName, "created_at")
	_sBOMProject.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sBOMProject.fillFieldMap()

	return _sBOMProject
}

type sBOMProject struct {
	sBOMProjectDo sBOMProjectDo

	ALL           field.Asterisk
	ID            field.Int64
	MinionID      field.Int64
	Inet          field.String
	Filepath      field.String
	SHA1          field.String
	Size          field.Int
	ComponentNum  field.Int
	PID           field.Int
	Exe           field.String
	Username      field.String
	ModifyAt      field.Time
	CriticalNum   field.Int
	CriticalScore field.Float64
	HighNum       field.Int
	HighScore     field.Float64
	MediumNum     field.Int
	MediumScore   field.Float64
	LowNum        field.Int
	LowScore      field.Float64
	TotalNum      field.Int
	TotalScore    field.Float64
	Nonce         field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (s sBOMProject) Table(newTableName string) *sBOMProject {
	s.sBOMProjectDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sBOMProject) As(alias string) *sBOMProject {
	s.sBOMProjectDo.DO = *(s.sBOMProjectDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sBOMProject) updateTableName(table string) *sBOMProject {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MinionID = field.NewInt64(table, "minion_id")
	s.Inet = field.NewString(table, "inet")
	s.Filepath = field.NewString(table, "filepath")
	s.SHA1 = field.NewString(table, "sha1")
	s.Size = field.NewInt(table, "size")
	s.ComponentNum = field.NewInt(table, "component_num")
	s.PID = field.NewInt(table, "pid")
	s.Exe = field.NewString(table, "exe")
	s.Username = field.NewString(table, "username")
	s.ModifyAt = field.NewTime(table, "modify_at")
	s.CriticalNum = field.NewInt(table, "critical_num")
	s.CriticalScore = field.NewFloat64(table, "critical_score")
	s.HighNum = field.NewInt(table, "high_num")
	s.HighScore = field.NewFloat64(table, "high_score")
	s.MediumNum = field.NewInt(table, "medium_num")
	s.MediumScore = field.NewFloat64(table, "medium_score")
	s.LowNum = field.NewInt(table, "low_num")
	s.LowScore = field.NewFloat64(table, "low_score")
	s.TotalNum = field.NewInt(table, "total_num")
	s.TotalScore = field.NewFloat64(table, "total_score")
	s.Nonce = field.NewInt64(table, "nonce")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sBOMProject) WithContext(ctx context.Context) *sBOMProjectDo {
	return s.sBOMProjectDo.WithContext(ctx)
}

func (s sBOMProject) TableName() string { return s.sBOMProjectDo.TableName() }

func (s sBOMProject) Alias() string { return s.sBOMProjectDo.Alias() }

func (s sBOMProject) Columns(cols ...field.Expr) gen.Columns { return s.sBOMProjectDo.Columns(cols...) }

func (s *sBOMProject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sBOMProject) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["id"] = s.ID
	s.fieldMap["minion_id"] = s.MinionID
	s.fieldMap["inet"] = s.Inet
	s.fieldMap["filepath"] = s.Filepath
	s.fieldMap["sha1"] = s.SHA1
	s.fieldMap["size"] = s.Size
	s.fieldMap["component_num"] = s.ComponentNum
	s.fieldMap["pid"] = s.PID
	s.fieldMap["exe"] = s.Exe
	s.fieldMap["username"] = s.Username
	s.fieldMap["modify_at"] = s.ModifyAt
	s.fieldMap["critical_num"] = s.CriticalNum
	s.fieldMap["critical_score"] = s.CriticalScore
	s.fieldMap["high_num"] = s.HighNum
	s.fieldMap["high_score"] = s.HighScore
	s.fieldMap["medium_num"] = s.MediumNum
	s.fieldMap["medium_score"] = s.MediumScore
	s.fieldMap["low_num"] = s.LowNum
	s.fieldMap["low_score"] = s.LowScore
	s.fieldMap["total_num"] = s.TotalNum
	s.fieldMap["total_score"] = s.TotalScore
	s.fieldMap["nonce"] = s.Nonce
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sBOMProject) clone(db *gorm.DB) sBOMProject {
	s.sBOMProjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sBOMProject) replaceDB(db *gorm.DB) sBOMProject {
	s.sBOMProjectDo.ReplaceDB(db)
	return s
}

type sBOMProjectDo struct{ gen.DO }

func (s sBOMProjectDo) Debug() *sBOMProjectDo {
	return s.withDO(s.DO.Debug())
}

func (s sBOMProjectDo) WithContext(ctx context.Context) *sBOMProjectDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sBOMProjectDo) ReadDB() *sBOMProjectDo {
	return s.Clauses(dbresolver.Read)
}

func (s sBOMProjectDo) WriteDB() *sBOMProjectDo {
	return s.Clauses(dbresolver.Write)
}

func (s sBOMProjectDo) Session(config *gorm.Session) *sBOMProjectDo {
	return s.withDO(s.DO.Session(config))
}

func (s sBOMProjectDo) Clauses(conds ...clause.Expression) *sBOMProjectDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sBOMProjectDo) Returning(value interface{}, columns ...string) *sBOMProjectDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sBOMProjectDo) Not(conds ...gen.Condition) *sBOMProjectDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sBOMProjectDo) Or(conds ...gen.Condition) *sBOMProjectDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sBOMProjectDo) Select(conds ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sBOMProjectDo) Where(conds ...gen.Condition) *sBOMProjectDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sBOMProjectDo) Order(conds ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sBOMProjectDo) Distinct(cols ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sBOMProjectDo) Omit(cols ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sBOMProjectDo) Join(table schema.Tabler, on ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sBOMProjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sBOMProjectDo) RightJoin(table schema.Tabler, on ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sBOMProjectDo) Group(cols ...field.Expr) *sBOMProjectDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sBOMProjectDo) Having(conds ...gen.Condition) *sBOMProjectDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sBOMProjectDo) Limit(limit int) *sBOMProjectDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sBOMProjectDo) Offset(offset int) *sBOMProjectDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sBOMProjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sBOMProjectDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sBOMProjectDo) Unscoped() *sBOMProjectDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sBOMProjectDo) Create(values ...*model.SBOMProject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sBOMProjectDo) CreateInBatches(values []*model.SBOMProject, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sBOMProjectDo) Save(values ...*model.SBOMProject) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sBOMProjectDo) First() (*model.SBOMProject, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMProject), nil
	}
}

func (s sBOMProjectDo) Take() (*model.SBOMProject, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMProject), nil
	}
}

func (s sBOMProjectDo) Last() (*model.SBOMProject, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMProject), nil
	}
}

func (s sBOMProjectDo) Find() ([]*model.SBOMProject, error) {
	result, err := s.DO.Find()
	return result.([]*model.SBOMProject), err
}

func (s sBOMProjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SBOMProject, err error) {
	buf := make([]*model.SBOMProject, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sBOMProjectDo) FindInBatches(result *[]*model.SBOMProject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sBOMProjectDo) Attrs(attrs ...field.AssignExpr) *sBOMProjectDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sBOMProjectDo) Assign(attrs ...field.AssignExpr) *sBOMProjectDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sBOMProjectDo) Joins(fields ...field.RelationField) *sBOMProjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sBOMProjectDo) Preload(fields ...field.RelationField) *sBOMProjectDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sBOMProjectDo) FirstOrInit() (*model.SBOMProject, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMProject), nil
	}
}

func (s sBOMProjectDo) FirstOrCreate() (*model.SBOMProject, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMProject), nil
	}
}

func (s sBOMProjectDo) FindByPage(offset int, limit int) (result []*model.SBOMProject, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sBOMProjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sBOMProjectDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sBOMProjectDo) Delete(models ...*model.SBOMProject) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sBOMProjectDo) withDO(do gen.Dao) *sBOMProjectDo {
	s.DO = *do.(*gen.DO)
	return s
}
