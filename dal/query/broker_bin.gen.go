// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newBrokerBin(db *gorm.DB, opts ...gen.DOOption) brokerBin {
	_brokerBin := brokerBin{}

	_brokerBin.brokerBinDo.UseDB(db, opts...)
	_brokerBin.brokerBinDo.UseModel(&model.BrokerBin{})

	tableName := _brokerBin.brokerBinDo.TableName()
	_brokerBin.ALL = field.NewAsterisk(tableName)
	_brokerBin.ID = field.NewInt64(tableName, "id")
	_brokerBin.Name = field.NewString(tableName, "name")
	_brokerBin.FileID = field.NewInt64(tableName, "file_id")
	_brokerBin.Size = field.NewInt64(tableName, "size")
	_brokerBin.Hash = field.NewString(tableName, "hash")
	_brokerBin.Goos = field.NewString(tableName, "goos")
	_brokerBin.Arch = field.NewString(tableName, "arch")
	_brokerBin.Semver = field.NewString(tableName, "semver")
	_brokerBin.Changelog = field.NewString(tableName, "changelog")
	_brokerBin.CreatedAt = field.NewTime(tableName, "created_at")
	_brokerBin.UpdatedAt = field.NewTime(tableName, "updated_at")

	_brokerBin.fillFieldMap()

	return _brokerBin
}

type brokerBin struct {
	brokerBinDo brokerBinDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	FileID    field.Int64
	Size      field.Int64
	Hash      field.String
	Goos      field.String
	Arch      field.String
	Semver    field.String
	Changelog field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (b brokerBin) Table(newTableName string) *brokerBin {
	b.brokerBinDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b brokerBin) As(alias string) *brokerBin {
	b.brokerBinDo.DO = *(b.brokerBinDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *brokerBin) updateTableName(table string) *brokerBin {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.FileID = field.NewInt64(table, "file_id")
	b.Size = field.NewInt64(table, "size")
	b.Hash = field.NewString(table, "hash")
	b.Goos = field.NewString(table, "goos")
	b.Arch = field.NewString(table, "arch")
	b.Semver = field.NewString(table, "semver")
	b.Changelog = field.NewString(table, "changelog")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *brokerBin) WithContext(ctx context.Context) *brokerBinDo {
	return b.brokerBinDo.WithContext(ctx)
}

func (b brokerBin) TableName() string { return b.brokerBinDo.TableName() }

func (b brokerBin) Alias() string { return b.brokerBinDo.Alias() }

func (b brokerBin) Columns(cols ...field.Expr) gen.Columns { return b.brokerBinDo.Columns(cols...) }

func (b *brokerBin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *brokerBin) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 11)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["file_id"] = b.FileID
	b.fieldMap["size"] = b.Size
	b.fieldMap["hash"] = b.Hash
	b.fieldMap["goos"] = b.Goos
	b.fieldMap["arch"] = b.Arch
	b.fieldMap["semver"] = b.Semver
	b.fieldMap["changelog"] = b.Changelog
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b brokerBin) clone(db *gorm.DB) brokerBin {
	b.brokerBinDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b brokerBin) replaceDB(db *gorm.DB) brokerBin {
	b.brokerBinDo.ReplaceDB(db)
	return b
}

type brokerBinDo struct{ gen.DO }

func (b brokerBinDo) Debug() *brokerBinDo {
	return b.withDO(b.DO.Debug())
}

func (b brokerBinDo) WithContext(ctx context.Context) *brokerBinDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b brokerBinDo) ReadDB() *brokerBinDo {
	return b.Clauses(dbresolver.Read)
}

func (b brokerBinDo) WriteDB() *brokerBinDo {
	return b.Clauses(dbresolver.Write)
}

func (b brokerBinDo) Session(config *gorm.Session) *brokerBinDo {
	return b.withDO(b.DO.Session(config))
}

func (b brokerBinDo) Clauses(conds ...clause.Expression) *brokerBinDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b brokerBinDo) Returning(value interface{}, columns ...string) *brokerBinDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b brokerBinDo) Not(conds ...gen.Condition) *brokerBinDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b brokerBinDo) Or(conds ...gen.Condition) *brokerBinDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b brokerBinDo) Select(conds ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b brokerBinDo) Where(conds ...gen.Condition) *brokerBinDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b brokerBinDo) Order(conds ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b brokerBinDo) Distinct(cols ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b brokerBinDo) Omit(cols ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b brokerBinDo) Join(table schema.Tabler, on ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b brokerBinDo) LeftJoin(table schema.Tabler, on ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b brokerBinDo) RightJoin(table schema.Tabler, on ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b brokerBinDo) Group(cols ...field.Expr) *brokerBinDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b brokerBinDo) Having(conds ...gen.Condition) *brokerBinDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b brokerBinDo) Limit(limit int) *brokerBinDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b brokerBinDo) Offset(offset int) *brokerBinDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b brokerBinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *brokerBinDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b brokerBinDo) Unscoped() *brokerBinDo {
	return b.withDO(b.DO.Unscoped())
}

func (b brokerBinDo) Create(values ...*model.BrokerBin) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b brokerBinDo) CreateInBatches(values []*model.BrokerBin, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b brokerBinDo) Save(values ...*model.BrokerBin) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b brokerBinDo) First() (*model.BrokerBin, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BrokerBin), nil
	}
}

func (b brokerBinDo) Take() (*model.BrokerBin, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BrokerBin), nil
	}
}

func (b brokerBinDo) Last() (*model.BrokerBin, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BrokerBin), nil
	}
}

func (b brokerBinDo) Find() ([]*model.BrokerBin, error) {
	result, err := b.DO.Find()
	return result.([]*model.BrokerBin), err
}

func (b brokerBinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BrokerBin, err error) {
	buf := make([]*model.BrokerBin, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b brokerBinDo) FindInBatches(result *[]*model.BrokerBin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b brokerBinDo) Attrs(attrs ...field.AssignExpr) *brokerBinDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b brokerBinDo) Assign(attrs ...field.AssignExpr) *brokerBinDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b brokerBinDo) Joins(fields ...field.RelationField) *brokerBinDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b brokerBinDo) Preload(fields ...field.RelationField) *brokerBinDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b brokerBinDo) FirstOrInit() (*model.BrokerBin, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BrokerBin), nil
	}
}

func (b brokerBinDo) FirstOrCreate() (*model.BrokerBin, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BrokerBin), nil
	}
}

func (b brokerBinDo) FindByPage(offset int, limit int) (result []*model.BrokerBin, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b brokerBinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b brokerBinDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b brokerBinDo) Delete(models ...*model.BrokerBin) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *brokerBinDo) withDO(do gen.Dao) *brokerBinDo {
	b.DO = *do.(*gen.DO)
	return b
}
