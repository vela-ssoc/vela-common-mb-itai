// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newPassDNS(db *gorm.DB, opts ...gen.DOOption) passDNS {
	_passDNS := passDNS{}

	_passDNS.passDNSDo.UseDB(db, opts...)
	_passDNS.passDNSDo.UseModel(&model.PassDNS{})

	tableName := _passDNS.passDNSDo.TableName()
	_passDNS.ALL = field.NewAsterisk(tableName)
	_passDNS.ID = field.NewInt64(tableName, "id")
	_passDNS.Domain = field.NewString(tableName, "domain")
	_passDNS.Kind = field.NewString(tableName, "kind")
	_passDNS.BeforeAt = field.NewTime(tableName, "before_at")
	_passDNS.UpdatedAt = field.NewTime(tableName, "updated_at")
	_passDNS.CreatedAt = field.NewTime(tableName, "created_at")

	_passDNS.fillFieldMap()

	return _passDNS
}

type passDNS struct {
	passDNSDo passDNSDo

	ALL       field.Asterisk
	ID        field.Int64
	Domain    field.String
	Kind      field.String
	BeforeAt  field.Time
	UpdatedAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p passDNS) Table(newTableName string) *passDNS {
	p.passDNSDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p passDNS) As(alias string) *passDNS {
	p.passDNSDo.DO = *(p.passDNSDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *passDNS) updateTableName(table string) *passDNS {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Domain = field.NewString(table, "domain")
	p.Kind = field.NewString(table, "kind")
	p.BeforeAt = field.NewTime(table, "before_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *passDNS) WithContext(ctx context.Context) *passDNSDo { return p.passDNSDo.WithContext(ctx) }

func (p passDNS) TableName() string { return p.passDNSDo.TableName() }

func (p passDNS) Alias() string { return p.passDNSDo.Alias() }

func (p passDNS) Columns(cols ...field.Expr) gen.Columns { return p.passDNSDo.Columns(cols...) }

func (p *passDNS) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *passDNS) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["domain"] = p.Domain
	p.fieldMap["kind"] = p.Kind
	p.fieldMap["before_at"] = p.BeforeAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p passDNS) clone(db *gorm.DB) passDNS {
	p.passDNSDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p passDNS) replaceDB(db *gorm.DB) passDNS {
	p.passDNSDo.ReplaceDB(db)
	return p
}

type passDNSDo struct{ gen.DO }

func (p passDNSDo) Debug() *passDNSDo {
	return p.withDO(p.DO.Debug())
}

func (p passDNSDo) WithContext(ctx context.Context) *passDNSDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p passDNSDo) ReadDB() *passDNSDo {
	return p.Clauses(dbresolver.Read)
}

func (p passDNSDo) WriteDB() *passDNSDo {
	return p.Clauses(dbresolver.Write)
}

func (p passDNSDo) Session(config *gorm.Session) *passDNSDo {
	return p.withDO(p.DO.Session(config))
}

func (p passDNSDo) Clauses(conds ...clause.Expression) *passDNSDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p passDNSDo) Returning(value interface{}, columns ...string) *passDNSDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p passDNSDo) Not(conds ...gen.Condition) *passDNSDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p passDNSDo) Or(conds ...gen.Condition) *passDNSDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p passDNSDo) Select(conds ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p passDNSDo) Where(conds ...gen.Condition) *passDNSDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p passDNSDo) Order(conds ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p passDNSDo) Distinct(cols ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p passDNSDo) Omit(cols ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p passDNSDo) Join(table schema.Tabler, on ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p passDNSDo) LeftJoin(table schema.Tabler, on ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p passDNSDo) RightJoin(table schema.Tabler, on ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p passDNSDo) Group(cols ...field.Expr) *passDNSDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p passDNSDo) Having(conds ...gen.Condition) *passDNSDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p passDNSDo) Limit(limit int) *passDNSDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p passDNSDo) Offset(offset int) *passDNSDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p passDNSDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *passDNSDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p passDNSDo) Unscoped() *passDNSDo {
	return p.withDO(p.DO.Unscoped())
}

func (p passDNSDo) Create(values ...*model.PassDNS) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p passDNSDo) CreateInBatches(values []*model.PassDNS, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p passDNSDo) Save(values ...*model.PassDNS) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p passDNSDo) First() (*model.PassDNS, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassDNS), nil
	}
}

func (p passDNSDo) Take() (*model.PassDNS, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassDNS), nil
	}
}

func (p passDNSDo) Last() (*model.PassDNS, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassDNS), nil
	}
}

func (p passDNSDo) Find() ([]*model.PassDNS, error) {
	result, err := p.DO.Find()
	return result.([]*model.PassDNS), err
}

func (p passDNSDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PassDNS, err error) {
	buf := make([]*model.PassDNS, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p passDNSDo) FindInBatches(result *[]*model.PassDNS, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p passDNSDo) Attrs(attrs ...field.AssignExpr) *passDNSDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p passDNSDo) Assign(attrs ...field.AssignExpr) *passDNSDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p passDNSDo) Joins(fields ...field.RelationField) *passDNSDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p passDNSDo) Preload(fields ...field.RelationField) *passDNSDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p passDNSDo) FirstOrInit() (*model.PassDNS, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassDNS), nil
	}
}

func (p passDNSDo) FirstOrCreate() (*model.PassDNS, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassDNS), nil
	}
}

func (p passDNSDo) FindByPage(offset int, limit int) (result []*model.PassDNS, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p passDNSDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p passDNSDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p passDNSDo) Delete(models ...*model.PassDNS) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *passDNSDo) withDO(do gen.Dao) *passDNSDo {
	p.DO = *do.(*gen.DO)
	return p
}
