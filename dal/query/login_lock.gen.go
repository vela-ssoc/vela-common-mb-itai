// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newLoginLock(db *gorm.DB, opts ...gen.DOOption) loginLock {
	_loginLock := loginLock{}

	_loginLock.loginLockDo.UseDB(db, opts...)
	_loginLock.loginLockDo.UseModel(&model.LoginLock{})

	tableName := _loginLock.loginLockDo.TableName()
	_loginLock.ALL = field.NewAsterisk(tableName)
	_loginLock.ID = field.NewInt64(tableName, "id")
	_loginLock.Username = field.NewString(tableName, "username")
	_loginLock.CreatedAt = field.NewTime(tableName, "created_at")

	_loginLock.fillFieldMap()

	return _loginLock
}

type loginLock struct {
	loginLockDo loginLockDo

	ALL       field.Asterisk
	ID        field.Int64
	Username  field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (l loginLock) Table(newTableName string) *loginLock {
	l.loginLockDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginLock) As(alias string) *loginLock {
	l.loginLockDo.DO = *(l.loginLockDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginLock) updateTableName(table string) *loginLock {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Username = field.NewString(table, "username")
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *loginLock) WithContext(ctx context.Context) *loginLockDo {
	return l.loginLockDo.WithContext(ctx)
}

func (l loginLock) TableName() string { return l.loginLockDo.TableName() }

func (l loginLock) Alias() string { return l.loginLockDo.Alias() }

func (l loginLock) Columns(cols ...field.Expr) gen.Columns { return l.loginLockDo.Columns(cols...) }

func (l *loginLock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginLock) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["id"] = l.ID
	l.fieldMap["username"] = l.Username
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l loginLock) clone(db *gorm.DB) loginLock {
	l.loginLockDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loginLock) replaceDB(db *gorm.DB) loginLock {
	l.loginLockDo.ReplaceDB(db)
	return l
}

type loginLockDo struct{ gen.DO }

func (l loginLockDo) Debug() *loginLockDo {
	return l.withDO(l.DO.Debug())
}

func (l loginLockDo) WithContext(ctx context.Context) *loginLockDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginLockDo) ReadDB() *loginLockDo {
	return l.Clauses(dbresolver.Read)
}

func (l loginLockDo) WriteDB() *loginLockDo {
	return l.Clauses(dbresolver.Write)
}

func (l loginLockDo) Session(config *gorm.Session) *loginLockDo {
	return l.withDO(l.DO.Session(config))
}

func (l loginLockDo) Clauses(conds ...clause.Expression) *loginLockDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginLockDo) Returning(value interface{}, columns ...string) *loginLockDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginLockDo) Not(conds ...gen.Condition) *loginLockDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginLockDo) Or(conds ...gen.Condition) *loginLockDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginLockDo) Select(conds ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginLockDo) Where(conds ...gen.Condition) *loginLockDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginLockDo) Order(conds ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginLockDo) Distinct(cols ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginLockDo) Omit(cols ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginLockDo) Join(table schema.Tabler, on ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginLockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginLockDo) RightJoin(table schema.Tabler, on ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginLockDo) Group(cols ...field.Expr) *loginLockDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginLockDo) Having(conds ...gen.Condition) *loginLockDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginLockDo) Limit(limit int) *loginLockDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginLockDo) Offset(offset int) *loginLockDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginLockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *loginLockDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginLockDo) Unscoped() *loginLockDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginLockDo) Create(values ...*model.LoginLock) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginLockDo) CreateInBatches(values []*model.LoginLock, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginLockDo) Save(values ...*model.LoginLock) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginLockDo) First() (*model.LoginLock, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginLock), nil
	}
}

func (l loginLockDo) Take() (*model.LoginLock, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginLock), nil
	}
}

func (l loginLockDo) Last() (*model.LoginLock, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginLock), nil
	}
}

func (l loginLockDo) Find() ([]*model.LoginLock, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginLock), err
}

func (l loginLockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginLock, err error) {
	buf := make([]*model.LoginLock, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginLockDo) FindInBatches(result *[]*model.LoginLock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginLockDo) Attrs(attrs ...field.AssignExpr) *loginLockDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginLockDo) Assign(attrs ...field.AssignExpr) *loginLockDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginLockDo) Joins(fields ...field.RelationField) *loginLockDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginLockDo) Preload(fields ...field.RelationField) *loginLockDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginLockDo) FirstOrInit() (*model.LoginLock, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginLock), nil
	}
}

func (l loginLockDo) FirstOrCreate() (*model.LoginLock, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginLock), nil
	}
}

func (l loginLockDo) FindByPage(offset int, limit int) (result []*model.LoginLock, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginLockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loginLockDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loginLockDo) Delete(models ...*model.LoginLock) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loginLockDo) withDO(do gen.Dao) *loginLockDo {
	l.DO = *do.(*gen.DO)
	return l
}
