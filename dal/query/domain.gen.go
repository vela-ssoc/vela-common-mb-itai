// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newDomain(db *gorm.DB, opts ...gen.DOOption) domain {
	_domain := domain{}

	_domain.domainDo.UseDB(db, opts...)
	_domain.domainDo.UseModel(&model.Domain{})

	tableName := _domain.domainDo.TableName()
	_domain.ALL = field.NewAsterisk(tableName)
	_domain.ID = field.NewInt64(tableName, "id")
	_domain.Record = field.NewString(tableName, "record")
	_domain.Type = field.NewString(tableName, "type")
	_domain.Addr = field.NewString(tableName, "addr")
	_domain.Origin = field.NewString(tableName, "origin")
	_domain.ISP = field.NewString(tableName, "isp")
	_domain.Comment = field.NewString(tableName, "comment")
	_domain.CreatedAt = field.NewTime(tableName, "created_at")
	_domain.UpdatedAt = field.NewTime(tableName, "updated_at")

	_domain.fillFieldMap()

	return _domain
}

type domain struct {
	domainDo domainDo

	ALL       field.Asterisk
	ID        field.Int64
	Record    field.String
	Type      field.String
	Addr      field.String
	Origin    field.String
	ISP       field.String
	Comment   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d domain) Table(newTableName string) *domain {
	d.domainDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domain) As(alias string) *domain {
	d.domainDo.DO = *(d.domainDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domain) updateTableName(table string) *domain {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Record = field.NewString(table, "record")
	d.Type = field.NewString(table, "type")
	d.Addr = field.NewString(table, "addr")
	d.Origin = field.NewString(table, "origin")
	d.ISP = field.NewString(table, "isp")
	d.Comment = field.NewString(table, "comment")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *domain) WithContext(ctx context.Context) *domainDo { return d.domainDo.WithContext(ctx) }

func (d domain) TableName() string { return d.domainDo.TableName() }

func (d domain) Alias() string { return d.domainDo.Alias() }

func (d domain) Columns(cols ...field.Expr) gen.Columns { return d.domainDo.Columns(cols...) }

func (d *domain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domain) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["record"] = d.Record
	d.fieldMap["type"] = d.Type
	d.fieldMap["addr"] = d.Addr
	d.fieldMap["origin"] = d.Origin
	d.fieldMap["isp"] = d.ISP
	d.fieldMap["comment"] = d.Comment
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d domain) clone(db *gorm.DB) domain {
	d.domainDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domain) replaceDB(db *gorm.DB) domain {
	d.domainDo.ReplaceDB(db)
	return d
}

type domainDo struct{ gen.DO }

func (d domainDo) Debug() *domainDo {
	return d.withDO(d.DO.Debug())
}

func (d domainDo) WithContext(ctx context.Context) *domainDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainDo) ReadDB() *domainDo {
	return d.Clauses(dbresolver.Read)
}

func (d domainDo) WriteDB() *domainDo {
	return d.Clauses(dbresolver.Write)
}

func (d domainDo) Session(config *gorm.Session) *domainDo {
	return d.withDO(d.DO.Session(config))
}

func (d domainDo) Clauses(conds ...clause.Expression) *domainDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainDo) Returning(value interface{}, columns ...string) *domainDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainDo) Not(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainDo) Or(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainDo) Select(conds ...field.Expr) *domainDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainDo) Where(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainDo) Order(conds ...field.Expr) *domainDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainDo) Distinct(cols ...field.Expr) *domainDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainDo) Omit(cols ...field.Expr) *domainDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainDo) Join(table schema.Tabler, on ...field.Expr) *domainDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainDo) LeftJoin(table schema.Tabler, on ...field.Expr) *domainDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainDo) RightJoin(table schema.Tabler, on ...field.Expr) *domainDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainDo) Group(cols ...field.Expr) *domainDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainDo) Having(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainDo) Limit(limit int) *domainDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainDo) Offset(offset int) *domainDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *domainDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainDo) Unscoped() *domainDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainDo) Create(values ...*model.Domain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainDo) CreateInBatches(values []*model.Domain, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainDo) Save(values ...*model.Domain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainDo) First() (*model.Domain, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) Take() (*model.Domain, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) Last() (*model.Domain, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) Find() ([]*model.Domain, error) {
	result, err := d.DO.Find()
	return result.([]*model.Domain), err
}

func (d domainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Domain, err error) {
	buf := make([]*model.Domain, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainDo) FindInBatches(result *[]*model.Domain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainDo) Attrs(attrs ...field.AssignExpr) *domainDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainDo) Assign(attrs ...field.AssignExpr) *domainDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainDo) Joins(fields ...field.RelationField) *domainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainDo) Preload(fields ...field.RelationField) *domainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainDo) FirstOrInit() (*model.Domain, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) FirstOrCreate() (*model.Domain, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) FindByPage(offset int, limit int) (result []*model.Domain, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d domainDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d domainDo) Delete(models ...*model.Domain) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *domainDo) withDO(do gen.Dao) *domainDo {
	d.DO = *do.(*gen.DO)
	return d
}
