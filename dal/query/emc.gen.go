// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newEmc(db *gorm.DB, opts ...gen.DOOption) emc {
	_emc := emc{}

	_emc.emcDo.UseDB(db, opts...)
	_emc.emcDo.UseModel(&model.Emc{})

	tableName := _emc.emcDo.TableName()
	_emc.ALL = field.NewAsterisk(tableName)
	_emc.ID = field.NewInt64(tableName, "id")
	_emc.Name = field.NewString(tableName, "name")
	_emc.Host = field.NewString(tableName, "host")
	_emc.Account = field.NewString(tableName, "account")
	_emc.Token = field.NewString(tableName, "token")
	_emc.Enable = field.NewBool(tableName, "enable")

	_emc.fillFieldMap()

	return _emc
}

type emc struct {
	emcDo emcDo

	ALL     field.Asterisk
	ID      field.Int64
	Name    field.String
	Host    field.String
	Account field.String
	Token   field.String
	Enable  field.Bool

	fieldMap map[string]field.Expr
}

func (e emc) Table(newTableName string) *emc {
	e.emcDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emc) As(alias string) *emc {
	e.emcDo.DO = *(e.emcDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emc) updateTableName(table string) *emc {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Name = field.NewString(table, "name")
	e.Host = field.NewString(table, "host")
	e.Account = field.NewString(table, "account")
	e.Token = field.NewString(table, "token")
	e.Enable = field.NewBool(table, "enable")

	e.fillFieldMap()

	return e
}

func (e *emc) WithContext(ctx context.Context) *emcDo { return e.emcDo.WithContext(ctx) }

func (e emc) TableName() string { return e.emcDo.TableName() }

func (e emc) Alias() string { return e.emcDo.Alias() }

func (e emc) Columns(cols ...field.Expr) gen.Columns { return e.emcDo.Columns(cols...) }

func (e *emc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emc) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["host"] = e.Host
	e.fieldMap["account"] = e.Account
	e.fieldMap["token"] = e.Token
	e.fieldMap["enable"] = e.Enable
}

func (e emc) clone(db *gorm.DB) emc {
	e.emcDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emc) replaceDB(db *gorm.DB) emc {
	e.emcDo.ReplaceDB(db)
	return e
}

type emcDo struct{ gen.DO }

func (e emcDo) Debug() *emcDo {
	return e.withDO(e.DO.Debug())
}

func (e emcDo) WithContext(ctx context.Context) *emcDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emcDo) ReadDB() *emcDo {
	return e.Clauses(dbresolver.Read)
}

func (e emcDo) WriteDB() *emcDo {
	return e.Clauses(dbresolver.Write)
}

func (e emcDo) Session(config *gorm.Session) *emcDo {
	return e.withDO(e.DO.Session(config))
}

func (e emcDo) Clauses(conds ...clause.Expression) *emcDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emcDo) Returning(value interface{}, columns ...string) *emcDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emcDo) Not(conds ...gen.Condition) *emcDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emcDo) Or(conds ...gen.Condition) *emcDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emcDo) Select(conds ...field.Expr) *emcDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emcDo) Where(conds ...gen.Condition) *emcDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emcDo) Order(conds ...field.Expr) *emcDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emcDo) Distinct(cols ...field.Expr) *emcDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emcDo) Omit(cols ...field.Expr) *emcDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emcDo) Join(table schema.Tabler, on ...field.Expr) *emcDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emcDo) LeftJoin(table schema.Tabler, on ...field.Expr) *emcDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emcDo) RightJoin(table schema.Tabler, on ...field.Expr) *emcDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emcDo) Group(cols ...field.Expr) *emcDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emcDo) Having(conds ...gen.Condition) *emcDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emcDo) Limit(limit int) *emcDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emcDo) Offset(offset int) *emcDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emcDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *emcDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emcDo) Unscoped() *emcDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emcDo) Create(values ...*model.Emc) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emcDo) CreateInBatches(values []*model.Emc, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emcDo) Save(values ...*model.Emc) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emcDo) First() (*model.Emc, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emc), nil
	}
}

func (e emcDo) Take() (*model.Emc, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emc), nil
	}
}

func (e emcDo) Last() (*model.Emc, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emc), nil
	}
}

func (e emcDo) Find() ([]*model.Emc, error) {
	result, err := e.DO.Find()
	return result.([]*model.Emc), err
}

func (e emcDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Emc, err error) {
	buf := make([]*model.Emc, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emcDo) FindInBatches(result *[]*model.Emc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emcDo) Attrs(attrs ...field.AssignExpr) *emcDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emcDo) Assign(attrs ...field.AssignExpr) *emcDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emcDo) Joins(fields ...field.RelationField) *emcDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emcDo) Preload(fields ...field.RelationField) *emcDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emcDo) FirstOrInit() (*model.Emc, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emc), nil
	}
}

func (e emcDo) FirstOrCreate() (*model.Emc, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emc), nil
	}
}

func (e emcDo) FindByPage(offset int, limit int) (result []*model.Emc, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emcDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emcDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emcDo) Delete(models ...*model.Emc) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emcDo) withDO(do gen.Dao) *emcDo {
	e.DO = *do.(*gen.DO)
	return e
}
