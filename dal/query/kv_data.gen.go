// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newKVData(db *gorm.DB, opts ...gen.DOOption) kVData {
	_kVData := kVData{}

	_kVData.kVDataDo.UseDB(db, opts...)
	_kVData.kVDataDo.UseModel(&model.KVData{})

	tableName := _kVData.kVDataDo.TableName()
	_kVData.ALL = field.NewAsterisk(tableName)
	_kVData.Bucket = field.NewString(tableName, "bucket")
	_kVData.Key = field.NewString(tableName, "key")
	_kVData.Value = field.NewBytes(tableName, "value")
	_kVData.Count = field.NewInt64(tableName, "count")
	_kVData.Lifetime = field.NewInt64(tableName, "lifetime")
	_kVData.ExpiredAt = field.NewTime(tableName, "expired_at")
	_kVData.CreatedAt = field.NewTime(tableName, "created_at")
	_kVData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_kVData.Version = field.NewInt64(tableName, "version")

	_kVData.fillFieldMap()

	return _kVData
}

type kVData struct {
	kVDataDo kVDataDo

	ALL       field.Asterisk
	Bucket    field.String
	Key       field.String
	Value     field.Bytes
	Count     field.Int64
	Lifetime  field.Int64
	ExpiredAt field.Time
	CreatedAt field.Time
	UpdatedAt field.Time
	Version   field.Int64

	fieldMap map[string]field.Expr
}

func (k kVData) Table(newTableName string) *kVData {
	k.kVDataDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kVData) As(alias string) *kVData {
	k.kVDataDo.DO = *(k.kVDataDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kVData) updateTableName(table string) *kVData {
	k.ALL = field.NewAsterisk(table)
	k.Bucket = field.NewString(table, "bucket")
	k.Key = field.NewString(table, "key")
	k.Value = field.NewBytes(table, "value")
	k.Count = field.NewInt64(table, "count")
	k.Lifetime = field.NewInt64(table, "lifetime")
	k.ExpiredAt = field.NewTime(table, "expired_at")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")
	k.Version = field.NewInt64(table, "version")

	k.fillFieldMap()

	return k
}

func (k *kVData) WithContext(ctx context.Context) *kVDataDo { return k.kVDataDo.WithContext(ctx) }

func (k kVData) TableName() string { return k.kVDataDo.TableName() }

func (k kVData) Alias() string { return k.kVDataDo.Alias() }

func (k kVData) Columns(cols ...field.Expr) gen.Columns { return k.kVDataDo.Columns(cols...) }

func (k *kVData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kVData) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 9)
	k.fieldMap["bucket"] = k.Bucket
	k.fieldMap["key"] = k.Key
	k.fieldMap["value"] = k.Value
	k.fieldMap["count"] = k.Count
	k.fieldMap["lifetime"] = k.Lifetime
	k.fieldMap["expired_at"] = k.ExpiredAt
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
	k.fieldMap["version"] = k.Version
}

func (k kVData) clone(db *gorm.DB) kVData {
	k.kVDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kVData) replaceDB(db *gorm.DB) kVData {
	k.kVDataDo.ReplaceDB(db)
	return k
}

type kVDataDo struct{ gen.DO }

func (k kVDataDo) Debug() *kVDataDo {
	return k.withDO(k.DO.Debug())
}

func (k kVDataDo) WithContext(ctx context.Context) *kVDataDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kVDataDo) ReadDB() *kVDataDo {
	return k.Clauses(dbresolver.Read)
}

func (k kVDataDo) WriteDB() *kVDataDo {
	return k.Clauses(dbresolver.Write)
}

func (k kVDataDo) Session(config *gorm.Session) *kVDataDo {
	return k.withDO(k.DO.Session(config))
}

func (k kVDataDo) Clauses(conds ...clause.Expression) *kVDataDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kVDataDo) Returning(value interface{}, columns ...string) *kVDataDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kVDataDo) Not(conds ...gen.Condition) *kVDataDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kVDataDo) Or(conds ...gen.Condition) *kVDataDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kVDataDo) Select(conds ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kVDataDo) Where(conds ...gen.Condition) *kVDataDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kVDataDo) Order(conds ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kVDataDo) Distinct(cols ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kVDataDo) Omit(cols ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kVDataDo) Join(table schema.Tabler, on ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kVDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kVDataDo) RightJoin(table schema.Tabler, on ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kVDataDo) Group(cols ...field.Expr) *kVDataDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kVDataDo) Having(conds ...gen.Condition) *kVDataDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kVDataDo) Limit(limit int) *kVDataDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kVDataDo) Offset(offset int) *kVDataDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kVDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kVDataDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kVDataDo) Unscoped() *kVDataDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kVDataDo) Create(values ...*model.KVData) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kVDataDo) CreateInBatches(values []*model.KVData, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kVDataDo) Save(values ...*model.KVData) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kVDataDo) First() (*model.KVData, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KVData), nil
	}
}

func (k kVDataDo) Take() (*model.KVData, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KVData), nil
	}
}

func (k kVDataDo) Last() (*model.KVData, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KVData), nil
	}
}

func (k kVDataDo) Find() ([]*model.KVData, error) {
	result, err := k.DO.Find()
	return result.([]*model.KVData), err
}

func (k kVDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KVData, err error) {
	buf := make([]*model.KVData, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kVDataDo) FindInBatches(result *[]*model.KVData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kVDataDo) Attrs(attrs ...field.AssignExpr) *kVDataDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kVDataDo) Assign(attrs ...field.AssignExpr) *kVDataDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kVDataDo) Joins(fields ...field.RelationField) *kVDataDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kVDataDo) Preload(fields ...field.RelationField) *kVDataDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kVDataDo) FirstOrInit() (*model.KVData, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KVData), nil
	}
}

func (k kVDataDo) FirstOrCreate() (*model.KVData, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KVData), nil
	}
}

func (k kVDataDo) FindByPage(offset int, limit int) (result []*model.KVData, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kVDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kVDataDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kVDataDo) Delete(models ...*model.KVData) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kVDataDo) withDO(do gen.Dao) *kVDataDo {
	k.DO = *do.(*gen.DO)
	return k
}
