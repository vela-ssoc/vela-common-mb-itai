// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newRisk(db *gorm.DB, opts ...gen.DOOption) risk {
	_risk := risk{}

	_risk.riskDo.UseDB(db, opts...)
	_risk.riskDo.UseModel(&model.Risk{})

	tableName := _risk.riskDo.TableName()
	_risk.ALL = field.NewAsterisk(tableName)
	_risk.ID = field.NewInt64(tableName, "id")
	_risk.MinionID = field.NewInt64(tableName, "minion_id")
	_risk.Inet = field.NewString(tableName, "inet")
	_risk.RiskType = field.NewString(tableName, "risk_type")
	_risk.Level = field.NewField(tableName, "level")
	_risk.Payload = field.NewString(tableName, "payload")
	_risk.Subject = field.NewString(tableName, "subject")
	_risk.LocalIP = field.NewString(tableName, "local_ip")
	_risk.LocalPort = field.NewInt(tableName, "local_port")
	_risk.RemoteIP = field.NewString(tableName, "remote_ip")
	_risk.RemotePort = field.NewInt(tableName, "remote_port")
	_risk.FromCode = field.NewString(tableName, "from_code")
	_risk.Region = field.NewString(tableName, "region")
	_risk.Reference = field.NewString(tableName, "reference")
	_risk.SendAlert = field.NewBool(tableName, "send_alert")
	_risk.Secret = field.NewString(tableName, "secret")
	_risk.Status = field.NewUint8(tableName, "status")
	_risk.Template = field.NewString(tableName, "template")
	_risk.Metadata = field.NewField(tableName, "metadata")
	_risk.OccurAt = field.NewTime(tableName, "occur_at")
	_risk.CreatedAt = field.NewTime(tableName, "created_at")

	_risk.fillFieldMap()

	return _risk
}

type risk struct {
	riskDo riskDo

	ALL        field.Asterisk
	ID         field.Int64
	MinionID   field.Int64
	Inet       field.String
	RiskType   field.String
	Level      field.Field
	Payload    field.String
	Subject    field.String
	LocalIP    field.String
	LocalPort  field.Int
	RemoteIP   field.String
	RemotePort field.Int
	FromCode   field.String
	Region     field.String
	Reference  field.String
	SendAlert  field.Bool
	Secret     field.String
	Status     field.Uint8
	Template   field.String
	Metadata   field.Field
	OccurAt    field.Time
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (r risk) Table(newTableName string) *risk {
	r.riskDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r risk) As(alias string) *risk {
	r.riskDo.DO = *(r.riskDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *risk) updateTableName(table string) *risk {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.MinionID = field.NewInt64(table, "minion_id")
	r.Inet = field.NewString(table, "inet")
	r.RiskType = field.NewString(table, "risk_type")
	r.Level = field.NewField(table, "level")
	r.Payload = field.NewString(table, "payload")
	r.Subject = field.NewString(table, "subject")
	r.LocalIP = field.NewString(table, "local_ip")
	r.LocalPort = field.NewInt(table, "local_port")
	r.RemoteIP = field.NewString(table, "remote_ip")
	r.RemotePort = field.NewInt(table, "remote_port")
	r.FromCode = field.NewString(table, "from_code")
	r.Region = field.NewString(table, "region")
	r.Reference = field.NewString(table, "reference")
	r.SendAlert = field.NewBool(table, "send_alert")
	r.Secret = field.NewString(table, "secret")
	r.Status = field.NewUint8(table, "status")
	r.Template = field.NewString(table, "template")
	r.Metadata = field.NewField(table, "metadata")
	r.OccurAt = field.NewTime(table, "occur_at")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *risk) WithContext(ctx context.Context) *riskDo { return r.riskDo.WithContext(ctx) }

func (r risk) TableName() string { return r.riskDo.TableName() }

func (r risk) Alias() string { return r.riskDo.Alias() }

func (r risk) Columns(cols ...field.Expr) gen.Columns { return r.riskDo.Columns(cols...) }

func (r *risk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *risk) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 21)
	r.fieldMap["id"] = r.ID
	r.fieldMap["minion_id"] = r.MinionID
	r.fieldMap["inet"] = r.Inet
	r.fieldMap["risk_type"] = r.RiskType
	r.fieldMap["level"] = r.Level
	r.fieldMap["payload"] = r.Payload
	r.fieldMap["subject"] = r.Subject
	r.fieldMap["local_ip"] = r.LocalIP
	r.fieldMap["local_port"] = r.LocalPort
	r.fieldMap["remote_ip"] = r.RemoteIP
	r.fieldMap["remote_port"] = r.RemotePort
	r.fieldMap["from_code"] = r.FromCode
	r.fieldMap["region"] = r.Region
	r.fieldMap["reference"] = r.Reference
	r.fieldMap["send_alert"] = r.SendAlert
	r.fieldMap["secret"] = r.Secret
	r.fieldMap["status"] = r.Status
	r.fieldMap["template"] = r.Template
	r.fieldMap["metadata"] = r.Metadata
	r.fieldMap["occur_at"] = r.OccurAt
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r risk) clone(db *gorm.DB) risk {
	r.riskDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r risk) replaceDB(db *gorm.DB) risk {
	r.riskDo.ReplaceDB(db)
	return r
}

type riskDo struct{ gen.DO }

func (r riskDo) Debug() *riskDo {
	return r.withDO(r.DO.Debug())
}

func (r riskDo) WithContext(ctx context.Context) *riskDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskDo) ReadDB() *riskDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskDo) WriteDB() *riskDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskDo) Session(config *gorm.Session) *riskDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskDo) Clauses(conds ...clause.Expression) *riskDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskDo) Returning(value interface{}, columns ...string) *riskDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskDo) Not(conds ...gen.Condition) *riskDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskDo) Or(conds ...gen.Condition) *riskDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskDo) Select(conds ...field.Expr) *riskDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskDo) Where(conds ...gen.Condition) *riskDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskDo) Order(conds ...field.Expr) *riskDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskDo) Distinct(cols ...field.Expr) *riskDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskDo) Omit(cols ...field.Expr) *riskDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskDo) Join(table schema.Tabler, on ...field.Expr) *riskDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *riskDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskDo) RightJoin(table schema.Tabler, on ...field.Expr) *riskDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskDo) Group(cols ...field.Expr) *riskDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskDo) Having(conds ...gen.Condition) *riskDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskDo) Limit(limit int) *riskDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskDo) Offset(offset int) *riskDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *riskDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskDo) Unscoped() *riskDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskDo) Create(values ...*model.Risk) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskDo) CreateInBatches(values []*model.Risk, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskDo) Save(values ...*model.Risk) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskDo) First() (*model.Risk, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Risk), nil
	}
}

func (r riskDo) Take() (*model.Risk, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Risk), nil
	}
}

func (r riskDo) Last() (*model.Risk, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Risk), nil
	}
}

func (r riskDo) Find() ([]*model.Risk, error) {
	result, err := r.DO.Find()
	return result.([]*model.Risk), err
}

func (r riskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Risk, err error) {
	buf := make([]*model.Risk, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskDo) FindInBatches(result *[]*model.Risk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskDo) Attrs(attrs ...field.AssignExpr) *riskDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskDo) Assign(attrs ...field.AssignExpr) *riskDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskDo) Joins(fields ...field.RelationField) *riskDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskDo) Preload(fields ...field.RelationField) *riskDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskDo) FirstOrInit() (*model.Risk, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Risk), nil
	}
}

func (r riskDo) FirstOrCreate() (*model.Risk, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Risk), nil
	}
}

func (r riskDo) FindByPage(offset int, limit int) (result []*model.Risk, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskDo) Delete(models ...*model.Risk) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskDo) withDO(do gen.Dao) *riskDo {
	r.DO = *do.(*gen.DO)
	return r
}
