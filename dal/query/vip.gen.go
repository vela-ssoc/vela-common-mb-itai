// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newVIP(db *gorm.DB, opts ...gen.DOOption) vIP {
	_vIP := vIP{}

	_vIP.vIPDo.UseDB(db, opts...)
	_vIP.vIPDo.UseModel(&model.VIP{})

	tableName := _vIP.vIPDo.TableName()
	_vIP.ALL = field.NewAsterisk(tableName)
	_vIP.ID = field.NewInt64(tableName, "id")
	_vIP.VirtualIP = field.NewString(tableName, "virtual_ip")
	_vIP.VirtualPort = field.NewInt(tableName, "virtual_port")
	_vIP.VirtualAddr = field.NewString(tableName, "virtual_addr")
	_vIP.Enable = field.NewBool(tableName, "enable")
	_vIP.IDC = field.NewString(tableName, "idc")
	_vIP.MemberIP = field.NewString(tableName, "member_ip")
	_vIP.MemberPort = field.NewInt(tableName, "member_port")
	_vIP.Status = field.NewString(tableName, "status")
	_vIP.Priority = field.NewInt(tableName, "priority")
	_vIP.BizBranch = field.NewString(tableName, "biz_branch")
	_vIP.BizDept = field.NewString(tableName, "biz_dept")
	_vIP.BizType = field.NewString(tableName, "biz_type")
	_vIP.CreatedAt = field.NewTime(tableName, "created_at")
	_vIP.UpdatedAt = field.NewTime(tableName, "updated_at")

	_vIP.fillFieldMap()

	return _vIP
}

type vIP struct {
	vIPDo vIPDo

	ALL         field.Asterisk
	ID          field.Int64
	VirtualIP   field.String
	VirtualPort field.Int
	VirtualAddr field.String
	Enable      field.Bool
	IDC         field.String
	MemberIP    field.String
	MemberPort  field.Int
	Status      field.String
	Priority    field.Int
	BizBranch   field.String
	BizDept     field.String
	BizType     field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (v vIP) Table(newTableName string) *vIP {
	v.vIPDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vIP) As(alias string) *vIP {
	v.vIPDo.DO = *(v.vIPDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vIP) updateTableName(table string) *vIP {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VirtualIP = field.NewString(table, "virtual_ip")
	v.VirtualPort = field.NewInt(table, "virtual_port")
	v.VirtualAddr = field.NewString(table, "virtual_addr")
	v.Enable = field.NewBool(table, "enable")
	v.IDC = field.NewString(table, "idc")
	v.MemberIP = field.NewString(table, "member_ip")
	v.MemberPort = field.NewInt(table, "member_port")
	v.Status = field.NewString(table, "status")
	v.Priority = field.NewInt(table, "priority")
	v.BizBranch = field.NewString(table, "biz_branch")
	v.BizDept = field.NewString(table, "biz_dept")
	v.BizType = field.NewString(table, "biz_type")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *vIP) WithContext(ctx context.Context) *vIPDo { return v.vIPDo.WithContext(ctx) }

func (v vIP) TableName() string { return v.vIPDo.TableName() }

func (v vIP) Alias() string { return v.vIPDo.Alias() }

func (v vIP) Columns(cols ...field.Expr) gen.Columns { return v.vIPDo.Columns(cols...) }

func (v *vIP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vIP) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 15)
	v.fieldMap["id"] = v.ID
	v.fieldMap["virtual_ip"] = v.VirtualIP
	v.fieldMap["virtual_port"] = v.VirtualPort
	v.fieldMap["virtual_addr"] = v.VirtualAddr
	v.fieldMap["enable"] = v.Enable
	v.fieldMap["idc"] = v.IDC
	v.fieldMap["member_ip"] = v.MemberIP
	v.fieldMap["member_port"] = v.MemberPort
	v.fieldMap["status"] = v.Status
	v.fieldMap["priority"] = v.Priority
	v.fieldMap["biz_branch"] = v.BizBranch
	v.fieldMap["biz_dept"] = v.BizDept
	v.fieldMap["biz_type"] = v.BizType
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v vIP) clone(db *gorm.DB) vIP {
	v.vIPDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vIP) replaceDB(db *gorm.DB) vIP {
	v.vIPDo.ReplaceDB(db)
	return v
}

type vIPDo struct{ gen.DO }

func (v vIPDo) Debug() *vIPDo {
	return v.withDO(v.DO.Debug())
}

func (v vIPDo) WithContext(ctx context.Context) *vIPDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vIPDo) ReadDB() *vIPDo {
	return v.Clauses(dbresolver.Read)
}

func (v vIPDo) WriteDB() *vIPDo {
	return v.Clauses(dbresolver.Write)
}

func (v vIPDo) Session(config *gorm.Session) *vIPDo {
	return v.withDO(v.DO.Session(config))
}

func (v vIPDo) Clauses(conds ...clause.Expression) *vIPDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vIPDo) Returning(value interface{}, columns ...string) *vIPDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vIPDo) Not(conds ...gen.Condition) *vIPDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vIPDo) Or(conds ...gen.Condition) *vIPDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vIPDo) Select(conds ...field.Expr) *vIPDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vIPDo) Where(conds ...gen.Condition) *vIPDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vIPDo) Order(conds ...field.Expr) *vIPDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vIPDo) Distinct(cols ...field.Expr) *vIPDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vIPDo) Omit(cols ...field.Expr) *vIPDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vIPDo) Join(table schema.Tabler, on ...field.Expr) *vIPDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vIPDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vIPDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vIPDo) RightJoin(table schema.Tabler, on ...field.Expr) *vIPDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vIPDo) Group(cols ...field.Expr) *vIPDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vIPDo) Having(conds ...gen.Condition) *vIPDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vIPDo) Limit(limit int) *vIPDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vIPDo) Offset(offset int) *vIPDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vIPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vIPDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vIPDo) Unscoped() *vIPDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vIPDo) Create(values ...*model.VIP) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vIPDo) CreateInBatches(values []*model.VIP, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vIPDo) Save(values ...*model.VIP) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vIPDo) First() (*model.VIP, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VIP), nil
	}
}

func (v vIPDo) Take() (*model.VIP, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VIP), nil
	}
}

func (v vIPDo) Last() (*model.VIP, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VIP), nil
	}
}

func (v vIPDo) Find() ([]*model.VIP, error) {
	result, err := v.DO.Find()
	return result.([]*model.VIP), err
}

func (v vIPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VIP, err error) {
	buf := make([]*model.VIP, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vIPDo) FindInBatches(result *[]*model.VIP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vIPDo) Attrs(attrs ...field.AssignExpr) *vIPDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vIPDo) Assign(attrs ...field.AssignExpr) *vIPDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vIPDo) Joins(fields ...field.RelationField) *vIPDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vIPDo) Preload(fields ...field.RelationField) *vIPDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vIPDo) FirstOrInit() (*model.VIP, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VIP), nil
	}
}

func (v vIPDo) FirstOrCreate() (*model.VIP, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VIP), nil
	}
}

func (v vIPDo) FindByPage(offset int, limit int) (result []*model.VIP, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vIPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vIPDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vIPDo) Delete(models ...*model.VIP) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vIPDo) withDO(do gen.Dao) *vIPDo {
	v.DO = *do.(*gen.DO)
	return v
}
