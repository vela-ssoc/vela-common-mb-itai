// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newDong(db *gorm.DB, opts ...gen.DOOption) dong {
	_dong := dong{}

	_dong.dongDo.UseDB(db, opts...)
	_dong.dongDo.UseModel(&model.Dong{})

	tableName := _dong.dongDo.TableName()
	_dong.ALL = field.NewAsterisk(tableName)
	_dong.ID = field.NewInt64(tableName, "id")
	_dong.Name = field.NewString(tableName, "name")
	_dong.Addr = field.NewString(tableName, "addr")
	_dong.Host = field.NewString(tableName, "host")
	_dong.Account = field.NewString(tableName, "account")
	_dong.Token = field.NewString(tableName, "token")
	_dong.Enable = field.NewBool(tableName, "enable")
	_dong.CreatedAt = field.NewTime(tableName, "created_at")
	_dong.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dong.fillFieldMap()

	return _dong
}

type dong struct {
	dongDo dongDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Addr      field.String
	Host      field.String
	Account   field.String
	Token     field.String
	Enable    field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dong) Table(newTableName string) *dong {
	d.dongDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dong) As(alias string) *dong {
	d.dongDo.DO = *(d.dongDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dong) updateTableName(table string) *dong {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Name = field.NewString(table, "name")
	d.Addr = field.NewString(table, "addr")
	d.Host = field.NewString(table, "host")
	d.Account = field.NewString(table, "account")
	d.Token = field.NewString(table, "token")
	d.Enable = field.NewBool(table, "enable")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dong) WithContext(ctx context.Context) *dongDo { return d.dongDo.WithContext(ctx) }

func (d dong) TableName() string { return d.dongDo.TableName() }

func (d dong) Alias() string { return d.dongDo.Alias() }

func (d dong) Columns(cols ...field.Expr) gen.Columns { return d.dongDo.Columns(cols...) }

func (d *dong) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dong) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["addr"] = d.Addr
	d.fieldMap["host"] = d.Host
	d.fieldMap["account"] = d.Account
	d.fieldMap["token"] = d.Token
	d.fieldMap["enable"] = d.Enable
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dong) clone(db *gorm.DB) dong {
	d.dongDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dong) replaceDB(db *gorm.DB) dong {
	d.dongDo.ReplaceDB(db)
	return d
}

type dongDo struct{ gen.DO }

func (d dongDo) Debug() *dongDo {
	return d.withDO(d.DO.Debug())
}

func (d dongDo) WithContext(ctx context.Context) *dongDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dongDo) ReadDB() *dongDo {
	return d.Clauses(dbresolver.Read)
}

func (d dongDo) WriteDB() *dongDo {
	return d.Clauses(dbresolver.Write)
}

func (d dongDo) Session(config *gorm.Session) *dongDo {
	return d.withDO(d.DO.Session(config))
}

func (d dongDo) Clauses(conds ...clause.Expression) *dongDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dongDo) Returning(value interface{}, columns ...string) *dongDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dongDo) Not(conds ...gen.Condition) *dongDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dongDo) Or(conds ...gen.Condition) *dongDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dongDo) Select(conds ...field.Expr) *dongDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dongDo) Where(conds ...gen.Condition) *dongDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dongDo) Order(conds ...field.Expr) *dongDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dongDo) Distinct(cols ...field.Expr) *dongDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dongDo) Omit(cols ...field.Expr) *dongDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dongDo) Join(table schema.Tabler, on ...field.Expr) *dongDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dongDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dongDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dongDo) RightJoin(table schema.Tabler, on ...field.Expr) *dongDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dongDo) Group(cols ...field.Expr) *dongDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dongDo) Having(conds ...gen.Condition) *dongDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dongDo) Limit(limit int) *dongDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dongDo) Offset(offset int) *dongDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dongDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dongDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dongDo) Unscoped() *dongDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dongDo) Create(values ...*model.Dong) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dongDo) CreateInBatches(values []*model.Dong, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dongDo) Save(values ...*model.Dong) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dongDo) First() (*model.Dong, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dong), nil
	}
}

func (d dongDo) Take() (*model.Dong, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dong), nil
	}
}

func (d dongDo) Last() (*model.Dong, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dong), nil
	}
}

func (d dongDo) Find() ([]*model.Dong, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dong), err
}

func (d dongDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dong, err error) {
	buf := make([]*model.Dong, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dongDo) FindInBatches(result *[]*model.Dong, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dongDo) Attrs(attrs ...field.AssignExpr) *dongDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dongDo) Assign(attrs ...field.AssignExpr) *dongDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dongDo) Joins(fields ...field.RelationField) *dongDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dongDo) Preload(fields ...field.RelationField) *dongDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dongDo) FirstOrInit() (*model.Dong, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dong), nil
	}
}

func (d dongDo) FirstOrCreate() (*model.Dong, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dong), nil
	}
}

func (d dongDo) FindByPage(offset int, limit int) (result []*model.Dong, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dongDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dongDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dongDo) Delete(models ...*model.Dong) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dongDo) withDO(do gen.Dao) *dongDo {
	d.DO = *do.(*gen.DO)
	return d
}
