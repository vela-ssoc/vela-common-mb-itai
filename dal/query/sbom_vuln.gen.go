// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newSBOMVuln(db *gorm.DB, opts ...gen.DOOption) sBOMVuln {
	_sBOMVuln := sBOMVuln{}

	_sBOMVuln.sBOMVulnDo.UseDB(db, opts...)
	_sBOMVuln.sBOMVulnDo.UseModel(&model.SBOMVuln{})

	tableName := _sBOMVuln.sBOMVulnDo.TableName()
	_sBOMVuln.ALL = field.NewAsterisk(tableName)
	_sBOMVuln.ID = field.NewInt64(tableName, "id")
	_sBOMVuln.VulnID = field.NewString(tableName, "vuln_id")
	_sBOMVuln.PURL = field.NewString(tableName, "purl")
	_sBOMVuln.Title = field.NewString(tableName, "title")
	_sBOMVuln.Description = field.NewString(tableName, "description")
	_sBOMVuln.Score = field.NewFloat64(tableName, "score")
	_sBOMVuln.Level = field.NewUint8(tableName, "level")
	_sBOMVuln.Vector = field.NewString(tableName, "vector")
	_sBOMVuln.CVE = field.NewString(tableName, "cve")
	_sBOMVuln.CWE = field.NewString(tableName, "cwe")
	_sBOMVuln.Reference = field.NewString(tableName, "reference")
	_sBOMVuln.References = field.NewField(tableName, "references")
	_sBOMVuln.FixedVersion = field.NewString(tableName, "fixed_version")
	_sBOMVuln.Nonce = field.NewInt64(tableName, "nonce")
	_sBOMVuln.CreatedAt = field.NewTime(tableName, "created_at")
	_sBOMVuln.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sBOMVuln.fillFieldMap()

	return _sBOMVuln
}

type sBOMVuln struct {
	sBOMVulnDo sBOMVulnDo

	ALL          field.Asterisk
	ID           field.Int64
	VulnID       field.String
	PURL         field.String
	Title        field.String
	Description  field.String
	Score        field.Float64
	Level        field.Uint8
	Vector       field.String
	CVE          field.String
	CWE          field.String
	Reference    field.String
	References   field.Field
	FixedVersion field.String
	Nonce        field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (s sBOMVuln) Table(newTableName string) *sBOMVuln {
	s.sBOMVulnDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sBOMVuln) As(alias string) *sBOMVuln {
	s.sBOMVulnDo.DO = *(s.sBOMVulnDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sBOMVuln) updateTableName(table string) *sBOMVuln {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.VulnID = field.NewString(table, "vuln_id")
	s.PURL = field.NewString(table, "purl")
	s.Title = field.NewString(table, "title")
	s.Description = field.NewString(table, "description")
	s.Score = field.NewFloat64(table, "score")
	s.Level = field.NewUint8(table, "level")
	s.Vector = field.NewString(table, "vector")
	s.CVE = field.NewString(table, "cve")
	s.CWE = field.NewString(table, "cwe")
	s.Reference = field.NewString(table, "reference")
	s.References = field.NewField(table, "references")
	s.FixedVersion = field.NewString(table, "fixed_version")
	s.Nonce = field.NewInt64(table, "nonce")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sBOMVuln) WithContext(ctx context.Context) *sBOMVulnDo { return s.sBOMVulnDo.WithContext(ctx) }

func (s sBOMVuln) TableName() string { return s.sBOMVulnDo.TableName() }

func (s sBOMVuln) Alias() string { return s.sBOMVulnDo.Alias() }

func (s sBOMVuln) Columns(cols ...field.Expr) gen.Columns { return s.sBOMVulnDo.Columns(cols...) }

func (s *sBOMVuln) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sBOMVuln) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["vuln_id"] = s.VulnID
	s.fieldMap["purl"] = s.PURL
	s.fieldMap["title"] = s.Title
	s.fieldMap["description"] = s.Description
	s.fieldMap["score"] = s.Score
	s.fieldMap["level"] = s.Level
	s.fieldMap["vector"] = s.Vector
	s.fieldMap["cve"] = s.CVE
	s.fieldMap["cwe"] = s.CWE
	s.fieldMap["reference"] = s.Reference
	s.fieldMap["references"] = s.References
	s.fieldMap["fixed_version"] = s.FixedVersion
	s.fieldMap["nonce"] = s.Nonce
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sBOMVuln) clone(db *gorm.DB) sBOMVuln {
	s.sBOMVulnDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sBOMVuln) replaceDB(db *gorm.DB) sBOMVuln {
	s.sBOMVulnDo.ReplaceDB(db)
	return s
}

type sBOMVulnDo struct{ gen.DO }

func (s sBOMVulnDo) Debug() *sBOMVulnDo {
	return s.withDO(s.DO.Debug())
}

func (s sBOMVulnDo) WithContext(ctx context.Context) *sBOMVulnDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sBOMVulnDo) ReadDB() *sBOMVulnDo {
	return s.Clauses(dbresolver.Read)
}

func (s sBOMVulnDo) WriteDB() *sBOMVulnDo {
	return s.Clauses(dbresolver.Write)
}

func (s sBOMVulnDo) Session(config *gorm.Session) *sBOMVulnDo {
	return s.withDO(s.DO.Session(config))
}

func (s sBOMVulnDo) Clauses(conds ...clause.Expression) *sBOMVulnDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sBOMVulnDo) Returning(value interface{}, columns ...string) *sBOMVulnDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sBOMVulnDo) Not(conds ...gen.Condition) *sBOMVulnDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sBOMVulnDo) Or(conds ...gen.Condition) *sBOMVulnDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sBOMVulnDo) Select(conds ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sBOMVulnDo) Where(conds ...gen.Condition) *sBOMVulnDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sBOMVulnDo) Order(conds ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sBOMVulnDo) Distinct(cols ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sBOMVulnDo) Omit(cols ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sBOMVulnDo) Join(table schema.Tabler, on ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sBOMVulnDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sBOMVulnDo) RightJoin(table schema.Tabler, on ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sBOMVulnDo) Group(cols ...field.Expr) *sBOMVulnDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sBOMVulnDo) Having(conds ...gen.Condition) *sBOMVulnDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sBOMVulnDo) Limit(limit int) *sBOMVulnDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sBOMVulnDo) Offset(offset int) *sBOMVulnDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sBOMVulnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sBOMVulnDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sBOMVulnDo) Unscoped() *sBOMVulnDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sBOMVulnDo) Create(values ...*model.SBOMVuln) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sBOMVulnDo) CreateInBatches(values []*model.SBOMVuln, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sBOMVulnDo) Save(values ...*model.SBOMVuln) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sBOMVulnDo) First() (*model.SBOMVuln, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMVuln), nil
	}
}

func (s sBOMVulnDo) Take() (*model.SBOMVuln, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMVuln), nil
	}
}

func (s sBOMVulnDo) Last() (*model.SBOMVuln, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMVuln), nil
	}
}

func (s sBOMVulnDo) Find() ([]*model.SBOMVuln, error) {
	result, err := s.DO.Find()
	return result.([]*model.SBOMVuln), err
}

func (s sBOMVulnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SBOMVuln, err error) {
	buf := make([]*model.SBOMVuln, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sBOMVulnDo) FindInBatches(result *[]*model.SBOMVuln, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sBOMVulnDo) Attrs(attrs ...field.AssignExpr) *sBOMVulnDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sBOMVulnDo) Assign(attrs ...field.AssignExpr) *sBOMVulnDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sBOMVulnDo) Joins(fields ...field.RelationField) *sBOMVulnDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sBOMVulnDo) Preload(fields ...field.RelationField) *sBOMVulnDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sBOMVulnDo) FirstOrInit() (*model.SBOMVuln, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMVuln), nil
	}
}

func (s sBOMVulnDo) FirstOrCreate() (*model.SBOMVuln, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SBOMVuln), nil
	}
}

func (s sBOMVulnDo) FindByPage(offset int, limit int) (result []*model.SBOMVuln, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sBOMVulnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sBOMVulnDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sBOMVulnDo) Delete(models ...*model.SBOMVuln) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sBOMVulnDo) withDO(do gen.Dao) *sBOMVulnDo {
	s.DO = *do.(*gen.DO)
	return s
}
