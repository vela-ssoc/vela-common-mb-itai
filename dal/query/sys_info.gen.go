// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newSysInfo(db *gorm.DB, opts ...gen.DOOption) sysInfo {
	_sysInfo := sysInfo{}

	_sysInfo.sysInfoDo.UseDB(db, opts...)
	_sysInfo.sysInfoDo.UseModel(&model.SysInfo{})

	tableName := _sysInfo.sysInfoDo.TableName()
	_sysInfo.ALL = field.NewAsterisk(tableName)
	_sysInfo.ID = field.NewInt64(tableName, "id")
	_sysInfo.Release = field.NewString(tableName, "release")
	_sysInfo.CPUCore = field.NewInt(tableName, "cpu_core")
	_sysInfo.MemTotal = field.NewInt(tableName, "mem_total")
	_sysInfo.MemFree = field.NewInt(tableName, "mem_free")
	_sysInfo.SwapTotal = field.NewInt(tableName, "swap_total")
	_sysInfo.SwapFree = field.NewInt(tableName, "swap_free")
	_sysInfo.HostID = field.NewString(tableName, "host_id")
	_sysInfo.Family = field.NewString(tableName, "family")
	_sysInfo.Uptime = field.NewInt64(tableName, "uptime")
	_sysInfo.BootAt = field.NewInt64(tableName, "boot_at")
	_sysInfo.Virtual = field.NewString(tableName, "virtual_sys")
	_sysInfo.VirtualRole = field.NewString(tableName, "virtual_role")
	_sysInfo.ProcNumber = field.NewInt(tableName, "proc_number")
	_sysInfo.Hostname = field.NewString(tableName, "hostname")
	_sysInfo.CPUModel = field.NewString(tableName, "cpu_model")
	_sysInfo.AgentTotal = field.NewInt(tableName, "agent_total")
	_sysInfo.AgentAlloc = field.NewInt(tableName, "agent_alloc")
	_sysInfo.KernelVersion = field.NewString(tableName, "kernel_version")
	_sysInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sysInfo.fillFieldMap()

	return _sysInfo
}

type sysInfo struct {
	sysInfoDo sysInfoDo

	ALL           field.Asterisk
	ID            field.Int64
	Release       field.String
	CPUCore       field.Int
	MemTotal      field.Int
	MemFree       field.Int
	SwapTotal     field.Int
	SwapFree      field.Int
	HostID        field.String
	Family        field.String
	Uptime        field.Int64
	BootAt        field.Int64
	Virtual       field.String
	VirtualRole   field.String
	ProcNumber    field.Int
	Hostname      field.String
	CPUModel      field.String
	AgentTotal    field.Int
	AgentAlloc    field.Int
	KernelVersion field.String
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (s sysInfo) Table(newTableName string) *sysInfo {
	s.sysInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysInfo) As(alias string) *sysInfo {
	s.sysInfoDo.DO = *(s.sysInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysInfo) updateTableName(table string) *sysInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Release = field.NewString(table, "release")
	s.CPUCore = field.NewInt(table, "cpu_core")
	s.MemTotal = field.NewInt(table, "mem_total")
	s.MemFree = field.NewInt(table, "mem_free")
	s.SwapTotal = field.NewInt(table, "swap_total")
	s.SwapFree = field.NewInt(table, "swap_free")
	s.HostID = field.NewString(table, "host_id")
	s.Family = field.NewString(table, "family")
	s.Uptime = field.NewInt64(table, "uptime")
	s.BootAt = field.NewInt64(table, "boot_at")
	s.Virtual = field.NewString(table, "virtual_sys")
	s.VirtualRole = field.NewString(table, "virtual_role")
	s.ProcNumber = field.NewInt(table, "proc_number")
	s.Hostname = field.NewString(table, "hostname")
	s.CPUModel = field.NewString(table, "cpu_model")
	s.AgentTotal = field.NewInt(table, "agent_total")
	s.AgentAlloc = field.NewInt(table, "agent_alloc")
	s.KernelVersion = field.NewString(table, "kernel_version")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sysInfo) WithContext(ctx context.Context) *sysInfoDo { return s.sysInfoDo.WithContext(ctx) }

func (s sysInfo) TableName() string { return s.sysInfoDo.TableName() }

func (s sysInfo) Alias() string { return s.sysInfoDo.Alias() }

func (s sysInfo) Columns(cols ...field.Expr) gen.Columns { return s.sysInfoDo.Columns(cols...) }

func (s *sysInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["id"] = s.ID
	s.fieldMap["release"] = s.Release
	s.fieldMap["cpu_core"] = s.CPUCore
	s.fieldMap["mem_total"] = s.MemTotal
	s.fieldMap["mem_free"] = s.MemFree
	s.fieldMap["swap_total"] = s.SwapTotal
	s.fieldMap["swap_free"] = s.SwapFree
	s.fieldMap["host_id"] = s.HostID
	s.fieldMap["family"] = s.Family
	s.fieldMap["uptime"] = s.Uptime
	s.fieldMap["boot_at"] = s.BootAt
	s.fieldMap["virtual_sys"] = s.Virtual
	s.fieldMap["virtual_role"] = s.VirtualRole
	s.fieldMap["proc_number"] = s.ProcNumber
	s.fieldMap["hostname"] = s.Hostname
	s.fieldMap["cpu_model"] = s.CPUModel
	s.fieldMap["agent_total"] = s.AgentTotal
	s.fieldMap["agent_alloc"] = s.AgentAlloc
	s.fieldMap["kernel_version"] = s.KernelVersion
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sysInfo) clone(db *gorm.DB) sysInfo {
	s.sysInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysInfo) replaceDB(db *gorm.DB) sysInfo {
	s.sysInfoDo.ReplaceDB(db)
	return s
}

type sysInfoDo struct{ gen.DO }

func (s sysInfoDo) Debug() *sysInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s sysInfoDo) WithContext(ctx context.Context) *sysInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysInfoDo) ReadDB() *sysInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysInfoDo) WriteDB() *sysInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysInfoDo) Session(config *gorm.Session) *sysInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysInfoDo) Clauses(conds ...clause.Expression) *sysInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysInfoDo) Returning(value interface{}, columns ...string) *sysInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysInfoDo) Not(conds ...gen.Condition) *sysInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysInfoDo) Or(conds ...gen.Condition) *sysInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysInfoDo) Select(conds ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysInfoDo) Where(conds ...gen.Condition) *sysInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysInfoDo) Order(conds ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysInfoDo) Distinct(cols ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysInfoDo) Omit(cols ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysInfoDo) Join(table schema.Tabler, on ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysInfoDo) Group(cols ...field.Expr) *sysInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysInfoDo) Having(conds ...gen.Condition) *sysInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysInfoDo) Limit(limit int) *sysInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysInfoDo) Offset(offset int) *sysInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysInfoDo) Unscoped() *sysInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysInfoDo) Create(values ...*model.SysInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysInfoDo) CreateInBatches(values []*model.SysInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysInfoDo) Save(values ...*model.SysInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysInfoDo) First() (*model.SysInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysInfo), nil
	}
}

func (s sysInfoDo) Take() (*model.SysInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysInfo), nil
	}
}

func (s sysInfoDo) Last() (*model.SysInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysInfo), nil
	}
}

func (s sysInfoDo) Find() ([]*model.SysInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysInfo), err
}

func (s sysInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysInfo, err error) {
	buf := make([]*model.SysInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysInfoDo) FindInBatches(result *[]*model.SysInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysInfoDo) Attrs(attrs ...field.AssignExpr) *sysInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysInfoDo) Assign(attrs ...field.AssignExpr) *sysInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysInfoDo) Joins(fields ...field.RelationField) *sysInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysInfoDo) Preload(fields ...field.RelationField) *sysInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysInfoDo) FirstOrInit() (*model.SysInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysInfo), nil
	}
}

func (s sysInfoDo) FirstOrCreate() (*model.SysInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysInfo), nil
	}
}

func (s sysInfoDo) FindByPage(offset int, limit int) (result []*model.SysInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysInfoDo) Delete(models ...*model.SysInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysInfoDo) withDO(do gen.Dao) *sysInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
