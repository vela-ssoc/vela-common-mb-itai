// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newElastic(db *gorm.DB, opts ...gen.DOOption) elastic {
	_elastic := elastic{}

	_elastic.elasticDo.UseDB(db, opts...)
	_elastic.elasticDo.UseModel(&model.Elastic{})

	tableName := _elastic.elasticDo.TableName()
	_elastic.ALL = field.NewAsterisk(tableName)
	_elastic.ID = field.NewInt64(tableName, "id")
	_elastic.Host = field.NewString(tableName, "host")
	_elastic.Username = field.NewString(tableName, "username")
	_elastic.Password = field.NewString(tableName, "password")
	_elastic.Hosts = field.NewField(tableName, "hosts")
	_elastic.Desc = field.NewString(tableName, "desc")
	_elastic.Enable = field.NewBool(tableName, "enable")

	_elastic.fillFieldMap()

	return _elastic
}

type elastic struct {
	elasticDo elasticDo

	ALL      field.Asterisk
	ID       field.Int64
	Host     field.String
	Username field.String
	Password field.String
	Hosts    field.Field
	Desc     field.String
	Enable   field.Bool

	fieldMap map[string]field.Expr
}

func (e elastic) Table(newTableName string) *elastic {
	e.elasticDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e elastic) As(alias string) *elastic {
	e.elasticDo.DO = *(e.elasticDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *elastic) updateTableName(table string) *elastic {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Host = field.NewString(table, "host")
	e.Username = field.NewString(table, "username")
	e.Password = field.NewString(table, "password")
	e.Hosts = field.NewField(table, "hosts")
	e.Desc = field.NewString(table, "desc")
	e.Enable = field.NewBool(table, "enable")

	e.fillFieldMap()

	return e
}

func (e *elastic) WithContext(ctx context.Context) *elasticDo { return e.elasticDo.WithContext(ctx) }

func (e elastic) TableName() string { return e.elasticDo.TableName() }

func (e elastic) Alias() string { return e.elasticDo.Alias() }

func (e elastic) Columns(cols ...field.Expr) gen.Columns { return e.elasticDo.Columns(cols...) }

func (e *elastic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *elastic) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["host"] = e.Host
	e.fieldMap["username"] = e.Username
	e.fieldMap["password"] = e.Password
	e.fieldMap["hosts"] = e.Hosts
	e.fieldMap["desc"] = e.Desc
	e.fieldMap["enable"] = e.Enable
}

func (e elastic) clone(db *gorm.DB) elastic {
	e.elasticDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e elastic) replaceDB(db *gorm.DB) elastic {
	e.elasticDo.ReplaceDB(db)
	return e
}

type elasticDo struct{ gen.DO }

func (e elasticDo) Debug() *elasticDo {
	return e.withDO(e.DO.Debug())
}

func (e elasticDo) WithContext(ctx context.Context) *elasticDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e elasticDo) ReadDB() *elasticDo {
	return e.Clauses(dbresolver.Read)
}

func (e elasticDo) WriteDB() *elasticDo {
	return e.Clauses(dbresolver.Write)
}

func (e elasticDo) Session(config *gorm.Session) *elasticDo {
	return e.withDO(e.DO.Session(config))
}

func (e elasticDo) Clauses(conds ...clause.Expression) *elasticDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e elasticDo) Returning(value interface{}, columns ...string) *elasticDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e elasticDo) Not(conds ...gen.Condition) *elasticDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e elasticDo) Or(conds ...gen.Condition) *elasticDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e elasticDo) Select(conds ...field.Expr) *elasticDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e elasticDo) Where(conds ...gen.Condition) *elasticDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e elasticDo) Order(conds ...field.Expr) *elasticDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e elasticDo) Distinct(cols ...field.Expr) *elasticDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e elasticDo) Omit(cols ...field.Expr) *elasticDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e elasticDo) Join(table schema.Tabler, on ...field.Expr) *elasticDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e elasticDo) LeftJoin(table schema.Tabler, on ...field.Expr) *elasticDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e elasticDo) RightJoin(table schema.Tabler, on ...field.Expr) *elasticDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e elasticDo) Group(cols ...field.Expr) *elasticDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e elasticDo) Having(conds ...gen.Condition) *elasticDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e elasticDo) Limit(limit int) *elasticDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e elasticDo) Offset(offset int) *elasticDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e elasticDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *elasticDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e elasticDo) Unscoped() *elasticDo {
	return e.withDO(e.DO.Unscoped())
}

func (e elasticDo) Create(values ...*model.Elastic) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e elasticDo) CreateInBatches(values []*model.Elastic, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e elasticDo) Save(values ...*model.Elastic) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e elasticDo) First() (*model.Elastic, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Elastic), nil
	}
}

func (e elasticDo) Take() (*model.Elastic, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Elastic), nil
	}
}

func (e elasticDo) Last() (*model.Elastic, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Elastic), nil
	}
}

func (e elasticDo) Find() ([]*model.Elastic, error) {
	result, err := e.DO.Find()
	return result.([]*model.Elastic), err
}

func (e elasticDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Elastic, err error) {
	buf := make([]*model.Elastic, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e elasticDo) FindInBatches(result *[]*model.Elastic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e elasticDo) Attrs(attrs ...field.AssignExpr) *elasticDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e elasticDo) Assign(attrs ...field.AssignExpr) *elasticDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e elasticDo) Joins(fields ...field.RelationField) *elasticDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e elasticDo) Preload(fields ...field.RelationField) *elasticDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e elasticDo) FirstOrInit() (*model.Elastic, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Elastic), nil
	}
}

func (e elasticDo) FirstOrCreate() (*model.Elastic, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Elastic), nil
	}
}

func (e elasticDo) FindByPage(offset int, limit int) (result []*model.Elastic, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e elasticDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e elasticDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e elasticDo) Delete(models ...*model.Elastic) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *elasticDo) withDO(do gen.Dao) *elasticDo {
	e.DO = *do.(*gen.DO)
	return e
}
