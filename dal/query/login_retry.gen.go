// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newLoginRetry(db *gorm.DB, opts ...gen.DOOption) loginRetry {
	_loginRetry := loginRetry{}

	_loginRetry.loginRetryDo.UseDB(db, opts...)
	_loginRetry.loginRetryDo.UseModel(&model.LoginRetry{})

	tableName := _loginRetry.loginRetryDo.TableName()
	_loginRetry.ALL = field.NewAsterisk(tableName)
	_loginRetry.CreatedAt = field.NewTime(tableName, "created_at")

	_loginRetry.fillFieldMap()

	return _loginRetry
}

type loginRetry struct {
	loginRetryDo loginRetryDo

	ALL       field.Asterisk
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (l loginRetry) Table(newTableName string) *loginRetry {
	l.loginRetryDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginRetry) As(alias string) *loginRetry {
	l.loginRetryDo.DO = *(l.loginRetryDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginRetry) updateTableName(table string) *loginRetry {
	l.ALL = field.NewAsterisk(table)
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *loginRetry) WithContext(ctx context.Context) *loginRetryDo {
	return l.loginRetryDo.WithContext(ctx)
}

func (l loginRetry) TableName() string { return l.loginRetryDo.TableName() }

func (l loginRetry) Alias() string { return l.loginRetryDo.Alias() }

func (l loginRetry) Columns(cols ...field.Expr) gen.Columns { return l.loginRetryDo.Columns(cols...) }

func (l *loginRetry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginRetry) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 1)
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l loginRetry) clone(db *gorm.DB) loginRetry {
	l.loginRetryDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loginRetry) replaceDB(db *gorm.DB) loginRetry {
	l.loginRetryDo.ReplaceDB(db)
	return l
}

type loginRetryDo struct{ gen.DO }

func (l loginRetryDo) Debug() *loginRetryDo {
	return l.withDO(l.DO.Debug())
}

func (l loginRetryDo) WithContext(ctx context.Context) *loginRetryDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginRetryDo) ReadDB() *loginRetryDo {
	return l.Clauses(dbresolver.Read)
}

func (l loginRetryDo) WriteDB() *loginRetryDo {
	return l.Clauses(dbresolver.Write)
}

func (l loginRetryDo) Session(config *gorm.Session) *loginRetryDo {
	return l.withDO(l.DO.Session(config))
}

func (l loginRetryDo) Clauses(conds ...clause.Expression) *loginRetryDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginRetryDo) Returning(value interface{}, columns ...string) *loginRetryDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginRetryDo) Not(conds ...gen.Condition) *loginRetryDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginRetryDo) Or(conds ...gen.Condition) *loginRetryDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginRetryDo) Select(conds ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginRetryDo) Where(conds ...gen.Condition) *loginRetryDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginRetryDo) Order(conds ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginRetryDo) Distinct(cols ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginRetryDo) Omit(cols ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginRetryDo) Join(table schema.Tabler, on ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginRetryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginRetryDo) RightJoin(table schema.Tabler, on ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginRetryDo) Group(cols ...field.Expr) *loginRetryDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginRetryDo) Having(conds ...gen.Condition) *loginRetryDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginRetryDo) Limit(limit int) *loginRetryDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginRetryDo) Offset(offset int) *loginRetryDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginRetryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *loginRetryDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginRetryDo) Unscoped() *loginRetryDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginRetryDo) Create(values ...*model.LoginRetry) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginRetryDo) CreateInBatches(values []*model.LoginRetry, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginRetryDo) Save(values ...*model.LoginRetry) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginRetryDo) First() (*model.LoginRetry, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRetry), nil
	}
}

func (l loginRetryDo) Take() (*model.LoginRetry, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRetry), nil
	}
}

func (l loginRetryDo) Last() (*model.LoginRetry, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRetry), nil
	}
}

func (l loginRetryDo) Find() ([]*model.LoginRetry, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginRetry), err
}

func (l loginRetryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginRetry, err error) {
	buf := make([]*model.LoginRetry, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginRetryDo) FindInBatches(result *[]*model.LoginRetry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginRetryDo) Attrs(attrs ...field.AssignExpr) *loginRetryDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginRetryDo) Assign(attrs ...field.AssignExpr) *loginRetryDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginRetryDo) Joins(fields ...field.RelationField) *loginRetryDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginRetryDo) Preload(fields ...field.RelationField) *loginRetryDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginRetryDo) FirstOrInit() (*model.LoginRetry, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRetry), nil
	}
}

func (l loginRetryDo) FirstOrCreate() (*model.LoginRetry, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRetry), nil
	}
}

func (l loginRetryDo) FindByPage(offset int, limit int) (result []*model.LoginRetry, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginRetryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loginRetryDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loginRetryDo) Delete(models ...*model.LoginRetry) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loginRetryDo) withDO(do gen.Dao) *loginRetryDo {
	l.DO = *do.(*gen.DO)
	return l
}
