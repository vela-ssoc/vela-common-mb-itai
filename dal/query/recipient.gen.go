// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newRecipient(db *gorm.DB, opts ...gen.DOOption) recipient {
	_recipient := recipient{}

	_recipient.recipientDo.UseDB(db, opts...)
	_recipient.recipientDo.UseModel(&model.Recipient{})

	tableName := _recipient.recipientDo.TableName()
	_recipient.ALL = field.NewAsterisk(tableName)
	_recipient.ID = field.NewInt64(tableName, "id")
	_recipient.Name = field.NewString(tableName, "name")
	_recipient.SendDong = field.NewBool(tableName, "send_dong")
	_recipient.Dong = field.NewString(tableName, "dong")
	_recipient.SendEmail = field.NewBool(tableName, "send_email")
	_recipient.Email = field.NewString(tableName, "email")
	_recipient.SendWechat = field.NewBool(tableName, "send_wechat")
	_recipient.Wechat = field.NewString(tableName, "wechat")
	_recipient.SendSMS = field.NewBool(tableName, "send_sms")
	_recipient.SMS = field.NewString(tableName, "sms")
	_recipient.SendPhone = field.NewBool(tableName, "send_phone")
	_recipient.Phone = field.NewString(tableName, "phone")
	_recipient.Events = field.NewField(tableName, "events")
	_recipient.Risks = field.NewField(tableName, "risks")
	_recipient.EventCode = field.NewBytes(tableName, "event_code")
	_recipient.RiskCode = field.NewBytes(tableName, "risk_code")
	_recipient.CreatedAt = field.NewTime(tableName, "created_at")
	_recipient.UpdatedAt = field.NewTime(tableName, "updated_at")

	_recipient.fillFieldMap()

	return _recipient
}

type recipient struct {
	recipientDo recipientDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	SendDong   field.Bool
	Dong       field.String
	SendEmail  field.Bool
	Email      field.String
	SendWechat field.Bool
	Wechat     field.String
	SendSMS    field.Bool
	SMS        field.String
	SendPhone  field.Bool
	Phone      field.String
	Events     field.Field
	Risks      field.Field
	EventCode  field.Bytes
	RiskCode   field.Bytes
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (r recipient) Table(newTableName string) *recipient {
	r.recipientDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recipient) As(alias string) *recipient {
	r.recipientDo.DO = *(r.recipientDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recipient) updateTableName(table string) *recipient {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Name = field.NewString(table, "name")
	r.SendDong = field.NewBool(table, "send_dong")
	r.Dong = field.NewString(table, "dong")
	r.SendEmail = field.NewBool(table, "send_email")
	r.Email = field.NewString(table, "email")
	r.SendWechat = field.NewBool(table, "send_wechat")
	r.Wechat = field.NewString(table, "wechat")
	r.SendSMS = field.NewBool(table, "send_sms")
	r.SMS = field.NewString(table, "sms")
	r.SendPhone = field.NewBool(table, "send_phone")
	r.Phone = field.NewString(table, "phone")
	r.Events = field.NewField(table, "events")
	r.Risks = field.NewField(table, "risks")
	r.EventCode = field.NewBytes(table, "event_code")
	r.RiskCode = field.NewBytes(table, "risk_code")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *recipient) WithContext(ctx context.Context) *recipientDo {
	return r.recipientDo.WithContext(ctx)
}

func (r recipient) TableName() string { return r.recipientDo.TableName() }

func (r recipient) Alias() string { return r.recipientDo.Alias() }

func (r recipient) Columns(cols ...field.Expr) gen.Columns { return r.recipientDo.Columns(cols...) }

func (r *recipient) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recipient) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 18)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["send_dong"] = r.SendDong
	r.fieldMap["dong"] = r.Dong
	r.fieldMap["send_email"] = r.SendEmail
	r.fieldMap["email"] = r.Email
	r.fieldMap["send_wechat"] = r.SendWechat
	r.fieldMap["wechat"] = r.Wechat
	r.fieldMap["send_sms"] = r.SendSMS
	r.fieldMap["sms"] = r.SMS
	r.fieldMap["send_phone"] = r.SendPhone
	r.fieldMap["phone"] = r.Phone
	r.fieldMap["events"] = r.Events
	r.fieldMap["risks"] = r.Risks
	r.fieldMap["event_code"] = r.EventCode
	r.fieldMap["risk_code"] = r.RiskCode
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r recipient) clone(db *gorm.DB) recipient {
	r.recipientDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recipient) replaceDB(db *gorm.DB) recipient {
	r.recipientDo.ReplaceDB(db)
	return r
}

type recipientDo struct{ gen.DO }

func (r recipientDo) Debug() *recipientDo {
	return r.withDO(r.DO.Debug())
}

func (r recipientDo) WithContext(ctx context.Context) *recipientDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recipientDo) ReadDB() *recipientDo {
	return r.Clauses(dbresolver.Read)
}

func (r recipientDo) WriteDB() *recipientDo {
	return r.Clauses(dbresolver.Write)
}

func (r recipientDo) Session(config *gorm.Session) *recipientDo {
	return r.withDO(r.DO.Session(config))
}

func (r recipientDo) Clauses(conds ...clause.Expression) *recipientDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recipientDo) Returning(value interface{}, columns ...string) *recipientDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recipientDo) Not(conds ...gen.Condition) *recipientDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recipientDo) Or(conds ...gen.Condition) *recipientDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recipientDo) Select(conds ...field.Expr) *recipientDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recipientDo) Where(conds ...gen.Condition) *recipientDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recipientDo) Order(conds ...field.Expr) *recipientDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recipientDo) Distinct(cols ...field.Expr) *recipientDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recipientDo) Omit(cols ...field.Expr) *recipientDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recipientDo) Join(table schema.Tabler, on ...field.Expr) *recipientDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recipientDo) LeftJoin(table schema.Tabler, on ...field.Expr) *recipientDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recipientDo) RightJoin(table schema.Tabler, on ...field.Expr) *recipientDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recipientDo) Group(cols ...field.Expr) *recipientDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recipientDo) Having(conds ...gen.Condition) *recipientDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recipientDo) Limit(limit int) *recipientDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recipientDo) Offset(offset int) *recipientDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recipientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *recipientDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recipientDo) Unscoped() *recipientDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recipientDo) Create(values ...*model.Recipient) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recipientDo) CreateInBatches(values []*model.Recipient, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recipientDo) Save(values ...*model.Recipient) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recipientDo) First() (*model.Recipient, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recipient), nil
	}
}

func (r recipientDo) Take() (*model.Recipient, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recipient), nil
	}
}

func (r recipientDo) Last() (*model.Recipient, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recipient), nil
	}
}

func (r recipientDo) Find() ([]*model.Recipient, error) {
	result, err := r.DO.Find()
	return result.([]*model.Recipient), err
}

func (r recipientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Recipient, err error) {
	buf := make([]*model.Recipient, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recipientDo) FindInBatches(result *[]*model.Recipient, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recipientDo) Attrs(attrs ...field.AssignExpr) *recipientDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recipientDo) Assign(attrs ...field.AssignExpr) *recipientDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recipientDo) Joins(fields ...field.RelationField) *recipientDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recipientDo) Preload(fields ...field.RelationField) *recipientDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recipientDo) FirstOrInit() (*model.Recipient, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recipient), nil
	}
}

func (r recipientDo) FirstOrCreate() (*model.Recipient, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recipient), nil
	}
}

func (r recipientDo) FindByPage(offset int, limit int) (result []*model.Recipient, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recipientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recipientDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recipientDo) Delete(models ...*model.Recipient) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recipientDo) withDO(do gen.Dao) *recipientDo {
	r.DO = *do.(*gen.DO)
	return r
}
