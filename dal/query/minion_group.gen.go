// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newMinionGroup(db *gorm.DB, opts ...gen.DOOption) minionGroup {
	_minionGroup := minionGroup{}

	_minionGroup.minionGroupDo.UseDB(db, opts...)
	_minionGroup.minionGroupDo.UseModel(&model.MinionGroup{})

	tableName := _minionGroup.minionGroupDo.TableName()
	_minionGroup.ALL = field.NewAsterisk(tableName)
	_minionGroup.ID = field.NewInt64(tableName, "id")
	_minionGroup.MinionID = field.NewInt64(tableName, "minion_id")
	_minionGroup.Inet = field.NewString(tableName, "inet")
	_minionGroup.Name = field.NewString(tableName, "name")
	_minionGroup.GID = field.NewString(tableName, "gid")
	_minionGroup.Description = field.NewString(tableName, "description")
	_minionGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_minionGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_minionGroup.fillFieldMap()

	return _minionGroup
}

type minionGroup struct {
	minionGroupDo minionGroupDo

	ALL         field.Asterisk
	ID          field.Int64
	MinionID    field.Int64
	Inet        field.String
	Name        field.String
	GID         field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (m minionGroup) Table(newTableName string) *minionGroup {
	m.minionGroupDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m minionGroup) As(alias string) *minionGroup {
	m.minionGroupDo.DO = *(m.minionGroupDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *minionGroup) updateTableName(table string) *minionGroup {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MinionID = field.NewInt64(table, "minion_id")
	m.Inet = field.NewString(table, "inet")
	m.Name = field.NewString(table, "name")
	m.GID = field.NewString(table, "gid")
	m.Description = field.NewString(table, "description")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *minionGroup) WithContext(ctx context.Context) *minionGroupDo {
	return m.minionGroupDo.WithContext(ctx)
}

func (m minionGroup) TableName() string { return m.minionGroupDo.TableName() }

func (m minionGroup) Alias() string { return m.minionGroupDo.Alias() }

func (m minionGroup) Columns(cols ...field.Expr) gen.Columns { return m.minionGroupDo.Columns(cols...) }

func (m *minionGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *minionGroup) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["minion_id"] = m.MinionID
	m.fieldMap["inet"] = m.Inet
	m.fieldMap["name"] = m.Name
	m.fieldMap["gid"] = m.GID
	m.fieldMap["description"] = m.Description
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m minionGroup) clone(db *gorm.DB) minionGroup {
	m.minionGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m minionGroup) replaceDB(db *gorm.DB) minionGroup {
	m.minionGroupDo.ReplaceDB(db)
	return m
}

type minionGroupDo struct{ gen.DO }

func (m minionGroupDo) Debug() *minionGroupDo {
	return m.withDO(m.DO.Debug())
}

func (m minionGroupDo) WithContext(ctx context.Context) *minionGroupDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m minionGroupDo) ReadDB() *minionGroupDo {
	return m.Clauses(dbresolver.Read)
}

func (m minionGroupDo) WriteDB() *minionGroupDo {
	return m.Clauses(dbresolver.Write)
}

func (m minionGroupDo) Session(config *gorm.Session) *minionGroupDo {
	return m.withDO(m.DO.Session(config))
}

func (m minionGroupDo) Clauses(conds ...clause.Expression) *minionGroupDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m minionGroupDo) Returning(value interface{}, columns ...string) *minionGroupDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m minionGroupDo) Not(conds ...gen.Condition) *minionGroupDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m minionGroupDo) Or(conds ...gen.Condition) *minionGroupDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m minionGroupDo) Select(conds ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m minionGroupDo) Where(conds ...gen.Condition) *minionGroupDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m minionGroupDo) Order(conds ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m minionGroupDo) Distinct(cols ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m minionGroupDo) Omit(cols ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m minionGroupDo) Join(table schema.Tabler, on ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m minionGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m minionGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m minionGroupDo) Group(cols ...field.Expr) *minionGroupDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m minionGroupDo) Having(conds ...gen.Condition) *minionGroupDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m minionGroupDo) Limit(limit int) *minionGroupDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m minionGroupDo) Offset(offset int) *minionGroupDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m minionGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *minionGroupDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m minionGroupDo) Unscoped() *minionGroupDo {
	return m.withDO(m.DO.Unscoped())
}

func (m minionGroupDo) Create(values ...*model.MinionGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m minionGroupDo) CreateInBatches(values []*model.MinionGroup, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m minionGroupDo) Save(values ...*model.MinionGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m minionGroupDo) First() (*model.MinionGroup, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionGroup), nil
	}
}

func (m minionGroupDo) Take() (*model.MinionGroup, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionGroup), nil
	}
}

func (m minionGroupDo) Last() (*model.MinionGroup, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionGroup), nil
	}
}

func (m minionGroupDo) Find() ([]*model.MinionGroup, error) {
	result, err := m.DO.Find()
	return result.([]*model.MinionGroup), err
}

func (m minionGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MinionGroup, err error) {
	buf := make([]*model.MinionGroup, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m minionGroupDo) FindInBatches(result *[]*model.MinionGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m minionGroupDo) Attrs(attrs ...field.AssignExpr) *minionGroupDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m minionGroupDo) Assign(attrs ...field.AssignExpr) *minionGroupDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m minionGroupDo) Joins(fields ...field.RelationField) *minionGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m minionGroupDo) Preload(fields ...field.RelationField) *minionGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m minionGroupDo) FirstOrInit() (*model.MinionGroup, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionGroup), nil
	}
}

func (m minionGroupDo) FirstOrCreate() (*model.MinionGroup, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionGroup), nil
	}
}

func (m minionGroupDo) FindByPage(offset int, limit int) (result []*model.MinionGroup, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m minionGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m minionGroupDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m minionGroupDo) Delete(models ...*model.MinionGroup) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *minionGroupDo) withDO(do gen.Dao) *minionGroupDo {
	m.DO = *do.(*gen.DO)
	return m
}
