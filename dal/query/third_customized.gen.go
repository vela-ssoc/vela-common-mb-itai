// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newThirdCustomized(db *gorm.DB, opts ...gen.DOOption) thirdCustomized {
	_thirdCustomized := thirdCustomized{}

	_thirdCustomized.thirdCustomizedDo.UseDB(db, opts...)
	_thirdCustomized.thirdCustomizedDo.UseModel(&model.ThirdCustomized{})

	tableName := _thirdCustomized.thirdCustomizedDo.TableName()
	_thirdCustomized.ALL = field.NewAsterisk(tableName)
	_thirdCustomized.ID = field.NewInt64(tableName, "id")
	_thirdCustomized.Name = field.NewString(tableName, "name")
	_thirdCustomized.Icon = field.NewString(tableName, "icon")
	_thirdCustomized.Remark = field.NewString(tableName, "remark")
	_thirdCustomized.UpdatedAt = field.NewTime(tableName, "updated_at")
	_thirdCustomized.CreatedAt = field.NewTime(tableName, "created_at")

	_thirdCustomized.fillFieldMap()

	return _thirdCustomized
}

type thirdCustomized struct {
	thirdCustomizedDo thirdCustomizedDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Icon      field.String
	Remark    field.String
	UpdatedAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t thirdCustomized) Table(newTableName string) *thirdCustomized {
	t.thirdCustomizedDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thirdCustomized) As(alias string) *thirdCustomized {
	t.thirdCustomizedDo.DO = *(t.thirdCustomizedDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thirdCustomized) updateTableName(table string) *thirdCustomized {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Icon = field.NewString(table, "icon")
	t.Remark = field.NewString(table, "remark")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *thirdCustomized) WithContext(ctx context.Context) *thirdCustomizedDo {
	return t.thirdCustomizedDo.WithContext(ctx)
}

func (t thirdCustomized) TableName() string { return t.thirdCustomizedDo.TableName() }

func (t thirdCustomized) Alias() string { return t.thirdCustomizedDo.Alias() }

func (t thirdCustomized) Columns(cols ...field.Expr) gen.Columns {
	return t.thirdCustomizedDo.Columns(cols...)
}

func (t *thirdCustomized) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thirdCustomized) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t thirdCustomized) clone(db *gorm.DB) thirdCustomized {
	t.thirdCustomizedDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thirdCustomized) replaceDB(db *gorm.DB) thirdCustomized {
	t.thirdCustomizedDo.ReplaceDB(db)
	return t
}

type thirdCustomizedDo struct{ gen.DO }

func (t thirdCustomizedDo) Debug() *thirdCustomizedDo {
	return t.withDO(t.DO.Debug())
}

func (t thirdCustomizedDo) WithContext(ctx context.Context) *thirdCustomizedDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thirdCustomizedDo) ReadDB() *thirdCustomizedDo {
	return t.Clauses(dbresolver.Read)
}

func (t thirdCustomizedDo) WriteDB() *thirdCustomizedDo {
	return t.Clauses(dbresolver.Write)
}

func (t thirdCustomizedDo) Session(config *gorm.Session) *thirdCustomizedDo {
	return t.withDO(t.DO.Session(config))
}

func (t thirdCustomizedDo) Clauses(conds ...clause.Expression) *thirdCustomizedDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thirdCustomizedDo) Returning(value interface{}, columns ...string) *thirdCustomizedDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thirdCustomizedDo) Not(conds ...gen.Condition) *thirdCustomizedDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thirdCustomizedDo) Or(conds ...gen.Condition) *thirdCustomizedDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thirdCustomizedDo) Select(conds ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thirdCustomizedDo) Where(conds ...gen.Condition) *thirdCustomizedDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thirdCustomizedDo) Order(conds ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thirdCustomizedDo) Distinct(cols ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thirdCustomizedDo) Omit(cols ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thirdCustomizedDo) Join(table schema.Tabler, on ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thirdCustomizedDo) LeftJoin(table schema.Tabler, on ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thirdCustomizedDo) RightJoin(table schema.Tabler, on ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thirdCustomizedDo) Group(cols ...field.Expr) *thirdCustomizedDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thirdCustomizedDo) Having(conds ...gen.Condition) *thirdCustomizedDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thirdCustomizedDo) Limit(limit int) *thirdCustomizedDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thirdCustomizedDo) Offset(offset int) *thirdCustomizedDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thirdCustomizedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *thirdCustomizedDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thirdCustomizedDo) Unscoped() *thirdCustomizedDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thirdCustomizedDo) Create(values ...*model.ThirdCustomized) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thirdCustomizedDo) CreateInBatches(values []*model.ThirdCustomized, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thirdCustomizedDo) Save(values ...*model.ThirdCustomized) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thirdCustomizedDo) First() (*model.ThirdCustomized, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdCustomized), nil
	}
}

func (t thirdCustomizedDo) Take() (*model.ThirdCustomized, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdCustomized), nil
	}
}

func (t thirdCustomizedDo) Last() (*model.ThirdCustomized, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdCustomized), nil
	}
}

func (t thirdCustomizedDo) Find() ([]*model.ThirdCustomized, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThirdCustomized), err
}

func (t thirdCustomizedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThirdCustomized, err error) {
	buf := make([]*model.ThirdCustomized, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thirdCustomizedDo) FindInBatches(result *[]*model.ThirdCustomized, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thirdCustomizedDo) Attrs(attrs ...field.AssignExpr) *thirdCustomizedDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thirdCustomizedDo) Assign(attrs ...field.AssignExpr) *thirdCustomizedDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thirdCustomizedDo) Joins(fields ...field.RelationField) *thirdCustomizedDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thirdCustomizedDo) Preload(fields ...field.RelationField) *thirdCustomizedDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thirdCustomizedDo) FirstOrInit() (*model.ThirdCustomized, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdCustomized), nil
	}
}

func (t thirdCustomizedDo) FirstOrCreate() (*model.ThirdCustomized, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThirdCustomized), nil
	}
}

func (t thirdCustomizedDo) FindByPage(offset int, limit int) (result []*model.ThirdCustomized, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thirdCustomizedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thirdCustomizedDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thirdCustomizedDo) Delete(models ...*model.ThirdCustomized) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thirdCustomizedDo) withDO(do gen.Dao) *thirdCustomizedDo {
	t.DO = *do.(*gen.DO)
	return t
}
