// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newRiskFile(db *gorm.DB, opts ...gen.DOOption) riskFile {
	_riskFile := riskFile{}

	_riskFile.riskFileDo.UseDB(db, opts...)
	_riskFile.riskFileDo.UseModel(&model.RiskFile{})

	tableName := _riskFile.riskFileDo.TableName()
	_riskFile.ALL = field.NewAsterisk(tableName)
	_riskFile.ID = field.NewInt64(tableName, "id")
	_riskFile.Checksum = field.NewString(tableName, "checksum")
	_riskFile.Algorithm = field.NewString(tableName, "algorithm")
	_riskFile.Kind = field.NewString(tableName, "kind")
	_riskFile.Origin = field.NewString(tableName, "origin")
	_riskFile.Desc = field.NewString(tableName, "desc")
	_riskFile.BeforeAt = field.NewTime(tableName, "before_at")
	_riskFile.CreatedAt = field.NewTime(tableName, "created_at")
	_riskFile.UpdatedAt = field.NewTime(tableName, "updated_at")

	_riskFile.fillFieldMap()

	return _riskFile
}

type riskFile struct {
	riskFileDo riskFileDo

	ALL       field.Asterisk
	ID        field.Int64
	Checksum  field.String
	Algorithm field.String
	Kind      field.String
	Origin    field.String
	Desc      field.String
	BeforeAt  field.Time
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (r riskFile) Table(newTableName string) *riskFile {
	r.riskFileDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r riskFile) As(alias string) *riskFile {
	r.riskFileDo.DO = *(r.riskFileDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *riskFile) updateTableName(table string) *riskFile {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Checksum = field.NewString(table, "checksum")
	r.Algorithm = field.NewString(table, "algorithm")
	r.Kind = field.NewString(table, "kind")
	r.Origin = field.NewString(table, "origin")
	r.Desc = field.NewString(table, "desc")
	r.BeforeAt = field.NewTime(table, "before_at")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *riskFile) WithContext(ctx context.Context) *riskFileDo { return r.riskFileDo.WithContext(ctx) }

func (r riskFile) TableName() string { return r.riskFileDo.TableName() }

func (r riskFile) Alias() string { return r.riskFileDo.Alias() }

func (r riskFile) Columns(cols ...field.Expr) gen.Columns { return r.riskFileDo.Columns(cols...) }

func (r *riskFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *riskFile) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["checksum"] = r.Checksum
	r.fieldMap["algorithm"] = r.Algorithm
	r.fieldMap["kind"] = r.Kind
	r.fieldMap["origin"] = r.Origin
	r.fieldMap["desc"] = r.Desc
	r.fieldMap["before_at"] = r.BeforeAt
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r riskFile) clone(db *gorm.DB) riskFile {
	r.riskFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r riskFile) replaceDB(db *gorm.DB) riskFile {
	r.riskFileDo.ReplaceDB(db)
	return r
}

type riskFileDo struct{ gen.DO }

func (r riskFileDo) Debug() *riskFileDo {
	return r.withDO(r.DO.Debug())
}

func (r riskFileDo) WithContext(ctx context.Context) *riskFileDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r riskFileDo) ReadDB() *riskFileDo {
	return r.Clauses(dbresolver.Read)
}

func (r riskFileDo) WriteDB() *riskFileDo {
	return r.Clauses(dbresolver.Write)
}

func (r riskFileDo) Session(config *gorm.Session) *riskFileDo {
	return r.withDO(r.DO.Session(config))
}

func (r riskFileDo) Clauses(conds ...clause.Expression) *riskFileDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r riskFileDo) Returning(value interface{}, columns ...string) *riskFileDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r riskFileDo) Not(conds ...gen.Condition) *riskFileDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r riskFileDo) Or(conds ...gen.Condition) *riskFileDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r riskFileDo) Select(conds ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r riskFileDo) Where(conds ...gen.Condition) *riskFileDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r riskFileDo) Order(conds ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r riskFileDo) Distinct(cols ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r riskFileDo) Omit(cols ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r riskFileDo) Join(table schema.Tabler, on ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r riskFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r riskFileDo) RightJoin(table schema.Tabler, on ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r riskFileDo) Group(cols ...field.Expr) *riskFileDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r riskFileDo) Having(conds ...gen.Condition) *riskFileDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r riskFileDo) Limit(limit int) *riskFileDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r riskFileDo) Offset(offset int) *riskFileDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r riskFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *riskFileDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r riskFileDo) Unscoped() *riskFileDo {
	return r.withDO(r.DO.Unscoped())
}

func (r riskFileDo) Create(values ...*model.RiskFile) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r riskFileDo) CreateInBatches(values []*model.RiskFile, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r riskFileDo) Save(values ...*model.RiskFile) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r riskFileDo) First() (*model.RiskFile, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskFile), nil
	}
}

func (r riskFileDo) Take() (*model.RiskFile, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskFile), nil
	}
}

func (r riskFileDo) Last() (*model.RiskFile, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskFile), nil
	}
}

func (r riskFileDo) Find() ([]*model.RiskFile, error) {
	result, err := r.DO.Find()
	return result.([]*model.RiskFile), err
}

func (r riskFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RiskFile, err error) {
	buf := make([]*model.RiskFile, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r riskFileDo) FindInBatches(result *[]*model.RiskFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r riskFileDo) Attrs(attrs ...field.AssignExpr) *riskFileDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r riskFileDo) Assign(attrs ...field.AssignExpr) *riskFileDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r riskFileDo) Joins(fields ...field.RelationField) *riskFileDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r riskFileDo) Preload(fields ...field.RelationField) *riskFileDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r riskFileDo) FirstOrInit() (*model.RiskFile, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskFile), nil
	}
}

func (r riskFileDo) FirstOrCreate() (*model.RiskFile, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RiskFile), nil
	}
}

func (r riskFileDo) FindByPage(offset int, limit int) (result []*model.RiskFile, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r riskFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r riskFileDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r riskFileDo) Delete(models ...*model.RiskFile) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *riskFileDo) withDO(do gen.Dao) *riskFileDo {
	r.DO = *do.(*gen.DO)
	return r
}
