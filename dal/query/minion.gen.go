// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newMinion(db *gorm.DB, opts ...gen.DOOption) minion {
	_minion := minion{}

	_minion.minionDo.UseDB(db, opts...)
	_minion.minionDo.UseModel(&model.Minion{})

	tableName := _minion.minionDo.TableName()
	_minion.ALL = field.NewAsterisk(tableName)
	_minion.ID = field.NewInt64(tableName, "id")
	_minion.Inet = field.NewString(tableName, "inet")
	_minion.Inet6 = field.NewString(tableName, "inet6")
	_minion.MAC = field.NewString(tableName, "mac")
	_minion.Goos = field.NewString(tableName, "goos")
	_minion.Arch = field.NewString(tableName, "arch")
	_minion.Edition = field.NewString(tableName, "edition")
	_minion.Status = field.NewUint8(tableName, "status")
	_minion.Uptime = field.NewField(tableName, "uptime")
	_minion.BrokerID = field.NewInt64(tableName, "broker_id")
	_minion.BrokerName = field.NewString(tableName, "broker_name")
	_minion.Unload = field.NewBool(tableName, "unload")
	_minion.Unstable = field.NewBool(tableName, "unstable")
	_minion.Customized = field.NewString(tableName, "customized")
	_minion.OrgPath = field.NewString(tableName, "org_path")
	_minion.Identity = field.NewString(tableName, "identity")
	_minion.Category = field.NewString(tableName, "category")
	_minion.OpDuty = field.NewString(tableName, "op_duty")
	_minion.Comment = field.NewString(tableName, "comment")
	_minion.IBu = field.NewString(tableName, "ibu")
	_minion.IDC = field.NewString(tableName, "idc")
	_minion.CreatedAt = field.NewTime(tableName, "created_at")
	_minion.UpdatedAt = field.NewTime(tableName, "updated_at")

	_minion.fillFieldMap()

	return _minion
}

type minion struct {
	minionDo minionDo

	ALL        field.Asterisk
	ID         field.Int64
	Inet       field.String
	Inet6      field.String
	MAC        field.String
	Goos       field.String
	Arch       field.String
	Edition    field.String
	Status     field.Uint8
	Uptime     field.Field
	BrokerID   field.Int64
	BrokerName field.String
	Unload     field.Bool
	Unstable   field.Bool
	Customized field.String
	OrgPath    field.String
	Identity   field.String
	Category   field.String
	OpDuty     field.String
	Comment    field.String
	IBu        field.String
	IDC        field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (m minion) Table(newTableName string) *minion {
	m.minionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m minion) As(alias string) *minion {
	m.minionDo.DO = *(m.minionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *minion) updateTableName(table string) *minion {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Inet = field.NewString(table, "inet")
	m.Inet6 = field.NewString(table, "inet6")
	m.MAC = field.NewString(table, "mac")
	m.Goos = field.NewString(table, "goos")
	m.Arch = field.NewString(table, "arch")
	m.Edition = field.NewString(table, "edition")
	m.Status = field.NewUint8(table, "status")
	m.Uptime = field.NewField(table, "uptime")
	m.BrokerID = field.NewInt64(table, "broker_id")
	m.BrokerName = field.NewString(table, "broker_name")
	m.Unload = field.NewBool(table, "unload")
	m.Unstable = field.NewBool(table, "unstable")
	m.Customized = field.NewString(table, "customized")
	m.OrgPath = field.NewString(table, "org_path")
	m.Identity = field.NewString(table, "identity")
	m.Category = field.NewString(table, "category")
	m.OpDuty = field.NewString(table, "op_duty")
	m.Comment = field.NewString(table, "comment")
	m.IBu = field.NewString(table, "ibu")
	m.IDC = field.NewString(table, "idc")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *minion) WithContext(ctx context.Context) *minionDo { return m.minionDo.WithContext(ctx) }

func (m minion) TableName() string { return m.minionDo.TableName() }

func (m minion) Alias() string { return m.minionDo.Alias() }

func (m minion) Columns(cols ...field.Expr) gen.Columns { return m.minionDo.Columns(cols...) }

func (m *minion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *minion) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 23)
	m.fieldMap["id"] = m.ID
	m.fieldMap["inet"] = m.Inet
	m.fieldMap["inet6"] = m.Inet6
	m.fieldMap["mac"] = m.MAC
	m.fieldMap["goos"] = m.Goos
	m.fieldMap["arch"] = m.Arch
	m.fieldMap["edition"] = m.Edition
	m.fieldMap["status"] = m.Status
	m.fieldMap["uptime"] = m.Uptime
	m.fieldMap["broker_id"] = m.BrokerID
	m.fieldMap["broker_name"] = m.BrokerName
	m.fieldMap["unload"] = m.Unload
	m.fieldMap["unstable"] = m.Unstable
	m.fieldMap["customized"] = m.Customized
	m.fieldMap["org_path"] = m.OrgPath
	m.fieldMap["identity"] = m.Identity
	m.fieldMap["category"] = m.Category
	m.fieldMap["op_duty"] = m.OpDuty
	m.fieldMap["comment"] = m.Comment
	m.fieldMap["ibu"] = m.IBu
	m.fieldMap["idc"] = m.IDC
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m minion) clone(db *gorm.DB) minion {
	m.minionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m minion) replaceDB(db *gorm.DB) minion {
	m.minionDo.ReplaceDB(db)
	return m
}

type minionDo struct{ gen.DO }

func (m minionDo) Debug() *minionDo {
	return m.withDO(m.DO.Debug())
}

func (m minionDo) WithContext(ctx context.Context) *minionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m minionDo) ReadDB() *minionDo {
	return m.Clauses(dbresolver.Read)
}

func (m minionDo) WriteDB() *minionDo {
	return m.Clauses(dbresolver.Write)
}

func (m minionDo) Session(config *gorm.Session) *minionDo {
	return m.withDO(m.DO.Session(config))
}

func (m minionDo) Clauses(conds ...clause.Expression) *minionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m minionDo) Returning(value interface{}, columns ...string) *minionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m minionDo) Not(conds ...gen.Condition) *minionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m minionDo) Or(conds ...gen.Condition) *minionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m minionDo) Select(conds ...field.Expr) *minionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m minionDo) Where(conds ...gen.Condition) *minionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m minionDo) Order(conds ...field.Expr) *minionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m minionDo) Distinct(cols ...field.Expr) *minionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m minionDo) Omit(cols ...field.Expr) *minionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m minionDo) Join(table schema.Tabler, on ...field.Expr) *minionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m minionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *minionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m minionDo) RightJoin(table schema.Tabler, on ...field.Expr) *minionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m minionDo) Group(cols ...field.Expr) *minionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m minionDo) Having(conds ...gen.Condition) *minionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m minionDo) Limit(limit int) *minionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m minionDo) Offset(offset int) *minionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m minionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *minionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m minionDo) Unscoped() *minionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m minionDo) Create(values ...*model.Minion) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m minionDo) CreateInBatches(values []*model.Minion, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m minionDo) Save(values ...*model.Minion) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m minionDo) First() (*model.Minion, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Minion), nil
	}
}

func (m minionDo) Take() (*model.Minion, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Minion), nil
	}
}

func (m minionDo) Last() (*model.Minion, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Minion), nil
	}
}

func (m minionDo) Find() ([]*model.Minion, error) {
	result, err := m.DO.Find()
	return result.([]*model.Minion), err
}

func (m minionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Minion, err error) {
	buf := make([]*model.Minion, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m minionDo) FindInBatches(result *[]*model.Minion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m minionDo) Attrs(attrs ...field.AssignExpr) *minionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m minionDo) Assign(attrs ...field.AssignExpr) *minionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m minionDo) Joins(fields ...field.RelationField) *minionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m minionDo) Preload(fields ...field.RelationField) *minionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m minionDo) FirstOrInit() (*model.Minion, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Minion), nil
	}
}

func (m minionDo) FirstOrCreate() (*model.Minion, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Minion), nil
	}
}

func (m minionDo) FindByPage(offset int, limit int) (result []*model.Minion, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m minionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m minionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m minionDo) Delete(models ...*model.Minion) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *minionDo) withDO(do gen.Dao) *minionDo {
	m.DO = *do.(*gen.DO)
	return m
}
