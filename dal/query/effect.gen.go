// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newEffect(db *gorm.DB, opts ...gen.DOOption) effect {
	_effect := effect{}

	_effect.effectDo.UseDB(db, opts...)
	_effect.effectDo.UseModel(&model.Effect{})

	tableName := _effect.effectDo.TableName()
	_effect.ALL = field.NewAsterisk(tableName)
	_effect.ID = field.NewInt64(tableName, "id")
	_effect.SubmitID = field.NewInt64(tableName, "submit_id")
	_effect.Name = field.NewString(tableName, "name")
	_effect.Tag = field.NewString(tableName, "tag")
	_effect.EffectID = field.NewInt64(tableName, "effect_id")
	_effect.Enable = field.NewBool(tableName, "enable")
	_effect.Version = field.NewInt64(tableName, "version")
	_effect.Exclusion = field.NewField(tableName, "exclusion")
	_effect.CreatedID = field.NewInt64(tableName, "created_id")
	_effect.UpdatedID = field.NewInt64(tableName, "updated_id")
	_effect.CreatedAt = field.NewTime(tableName, "created_at")
	_effect.UpdatedAt = field.NewTime(tableName, "updated_at")

	_effect.fillFieldMap()

	return _effect
}

type effect struct {
	effectDo effectDo

	ALL       field.Asterisk
	ID        field.Int64
	SubmitID  field.Int64
	Name      field.String
	Tag       field.String
	EffectID  field.Int64
	Enable    field.Bool
	Version   field.Int64
	Exclusion field.Field
	CreatedID field.Int64
	UpdatedID field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (e effect) Table(newTableName string) *effect {
	e.effectDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e effect) As(alias string) *effect {
	e.effectDo.DO = *(e.effectDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *effect) updateTableName(table string) *effect {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SubmitID = field.NewInt64(table, "submit_id")
	e.Name = field.NewString(table, "name")
	e.Tag = field.NewString(table, "tag")
	e.EffectID = field.NewInt64(table, "effect_id")
	e.Enable = field.NewBool(table, "enable")
	e.Version = field.NewInt64(table, "version")
	e.Exclusion = field.NewField(table, "exclusion")
	e.CreatedID = field.NewInt64(table, "created_id")
	e.UpdatedID = field.NewInt64(table, "updated_id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *effect) WithContext(ctx context.Context) *effectDo { return e.effectDo.WithContext(ctx) }

func (e effect) TableName() string { return e.effectDo.TableName() }

func (e effect) Alias() string { return e.effectDo.Alias() }

func (e effect) Columns(cols ...field.Expr) gen.Columns { return e.effectDo.Columns(cols...) }

func (e *effect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *effect) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["submit_id"] = e.SubmitID
	e.fieldMap["name"] = e.Name
	e.fieldMap["tag"] = e.Tag
	e.fieldMap["effect_id"] = e.EffectID
	e.fieldMap["enable"] = e.Enable
	e.fieldMap["version"] = e.Version
	e.fieldMap["exclusion"] = e.Exclusion
	e.fieldMap["created_id"] = e.CreatedID
	e.fieldMap["updated_id"] = e.UpdatedID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e effect) clone(db *gorm.DB) effect {
	e.effectDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e effect) replaceDB(db *gorm.DB) effect {
	e.effectDo.ReplaceDB(db)
	return e
}

type effectDo struct{ gen.DO }

func (e effectDo) Debug() *effectDo {
	return e.withDO(e.DO.Debug())
}

func (e effectDo) WithContext(ctx context.Context) *effectDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e effectDo) ReadDB() *effectDo {
	return e.Clauses(dbresolver.Read)
}

func (e effectDo) WriteDB() *effectDo {
	return e.Clauses(dbresolver.Write)
}

func (e effectDo) Session(config *gorm.Session) *effectDo {
	return e.withDO(e.DO.Session(config))
}

func (e effectDo) Clauses(conds ...clause.Expression) *effectDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e effectDo) Returning(value interface{}, columns ...string) *effectDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e effectDo) Not(conds ...gen.Condition) *effectDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e effectDo) Or(conds ...gen.Condition) *effectDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e effectDo) Select(conds ...field.Expr) *effectDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e effectDo) Where(conds ...gen.Condition) *effectDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e effectDo) Order(conds ...field.Expr) *effectDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e effectDo) Distinct(cols ...field.Expr) *effectDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e effectDo) Omit(cols ...field.Expr) *effectDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e effectDo) Join(table schema.Tabler, on ...field.Expr) *effectDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e effectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *effectDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e effectDo) RightJoin(table schema.Tabler, on ...field.Expr) *effectDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e effectDo) Group(cols ...field.Expr) *effectDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e effectDo) Having(conds ...gen.Condition) *effectDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e effectDo) Limit(limit int) *effectDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e effectDo) Offset(offset int) *effectDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e effectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *effectDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e effectDo) Unscoped() *effectDo {
	return e.withDO(e.DO.Unscoped())
}

func (e effectDo) Create(values ...*model.Effect) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e effectDo) CreateInBatches(values []*model.Effect, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e effectDo) Save(values ...*model.Effect) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e effectDo) First() (*model.Effect, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Effect), nil
	}
}

func (e effectDo) Take() (*model.Effect, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Effect), nil
	}
}

func (e effectDo) Last() (*model.Effect, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Effect), nil
	}
}

func (e effectDo) Find() ([]*model.Effect, error) {
	result, err := e.DO.Find()
	return result.([]*model.Effect), err
}

func (e effectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Effect, err error) {
	buf := make([]*model.Effect, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e effectDo) FindInBatches(result *[]*model.Effect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e effectDo) Attrs(attrs ...field.AssignExpr) *effectDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e effectDo) Assign(attrs ...field.AssignExpr) *effectDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e effectDo) Joins(fields ...field.RelationField) *effectDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e effectDo) Preload(fields ...field.RelationField) *effectDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e effectDo) FirstOrInit() (*model.Effect, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Effect), nil
	}
}

func (e effectDo) FirstOrCreate() (*model.Effect, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Effect), nil
	}
}

func (e effectDo) FindByPage(offset int, limit int) (result []*model.Effect, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e effectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e effectDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e effectDo) Delete(models ...*model.Effect) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *effectDo) withDO(do gen.Dao) *effectDo {
	e.DO = *do.(*gen.DO)
	return e
}
