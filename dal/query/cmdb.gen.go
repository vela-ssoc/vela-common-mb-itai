// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newCmdb(db *gorm.DB, opts ...gen.DOOption) cmdb {
	_cmdb := cmdb{}

	_cmdb.cmdbDo.UseDB(db, opts...)
	_cmdb.cmdbDo.UseModel(&model.Cmdb{})

	tableName := _cmdb.cmdbDo.TableName()
	_cmdb.ALL = field.NewAsterisk(tableName)
	_cmdb.ID = field.NewInt64(tableName, "id")
	_cmdb.Inet = field.NewString(tableName, "inet")
	_cmdb.CmdbID = field.NewInt(tableName, "_id")
	_cmdb.Org = field.NewInt(tableName, "_org")
	_cmdb.OrgPath = field.NewString(tableName, "_org_path")
	_cmdb.Type = field.NewInt(tableName, "_type")
	_cmdb.AgentNotCheck = field.NewString(tableName, "agent_not_check")
	_cmdb.AgentVersion = field.NewInt(tableName, "agent_version")
	_cmdb.AppName = field.NewString(tableName, "appname")
	_cmdb.Area = field.NewString(tableName, "area")
	_cmdb.BaoleijiIdentity = field.NewString(tableName, "baoleiji_identity")
	_cmdb.BusinessScope = field.NewString(tableName, "business_scope")
	_cmdb.Category = field.NewString(tableName, "category")
	_cmdb.CategoryBranch = field.NewString(tableName, "category_branch")
	_cmdb.CategoryZone = field.NewInt(tableName, "category_zone")
	_cmdb.CiType = field.NewString(tableName, "ci_type")
	_cmdb.CmcIP = field.NewString(tableName, "cmc_ip")
	_cmdb.CncIP = field.NewString(tableName, "cnc_ip")
	_cmdb.Comment = field.NewString(tableName, "comment")
	_cmdb.CostBu = field.NewString(tableName, "cost_bu")
	_cmdb.CPU = field.NewString(tableName, "cpu")
	_cmdb.CPUCount = field.NewInt(tableName, "cpu_count")
	_cmdb.CreatedTime = field.NewString(tableName, "created_time")
	_cmdb.CtcIP = field.NewString(tableName, "ctc_ip")
	_cmdb.Env = field.NewString(tableName, "env")
	_cmdb.FloatIP = field.NewField(tableName, "float_ip")
	_cmdb.HardDisk = field.NewString(tableName, "harddisk")
	_cmdb.HostIP = field.NewString(tableName, "host_ip")
	_cmdb.Hostname = field.NewString(tableName, "hostname")
	_cmdb.IBu = field.NewString(tableName, "ibu")
	_cmdb.IDC = field.NewString(tableName, "idc")
	_cmdb.IPv6 = field.NewField(tableName, "ipv6")
	_cmdb.KernelVersion = field.NewString(tableName, "kernel_version")
	_cmdb.MinionNotCheck = field.NewString(tableName, "minion_not_check")
	_cmdb.NetOpen = field.NewString(tableName, "net_open")
	_cmdb.NicIP = field.NewString(tableName, "nic_ip")
	_cmdb.NicMAC = field.NewString(tableName, "nic_mac")
	_cmdb.OpDuty = field.NewString(tableName, "op_duty")
	_cmdb.OsVersion = field.NewString(tableName, "os_version")
	_cmdb.PrivateCloudType = field.NewString(tableName, "private_cloud_type")
	_cmdb.PrivateIP = field.NewField(tableName, "private_ip")
	_cmdb.Rack = field.NewString(tableName, "rack")
	_cmdb.RAMSize = field.NewString(tableName, "ram_size")
	_cmdb.RdDuty = field.NewString(tableName, "rd_duty")
	_cmdb.SecurityInfo = field.NewString(tableName, "security_info")
	_cmdb.SecurityRisk = field.NewInt(tableName, "security_risk")
	_cmdb.ServerRoom = field.NewString(tableName, "server_room")
	_cmdb.ServerSN = field.NewString(tableName, "server_sn")
	_cmdb.SSHPort = field.NewInt(tableName, "ssh_port")
	_cmdb.Status = field.NewString(tableName, "status")
	_cmdb.SysDuty = field.NewString(tableName, "sys_duty")
	_cmdb.Unique = field.NewString(tableName, "unique")
	_cmdb.UUID = field.NewString(tableName, "uuid")
	_cmdb.VServerType = field.NewString(tableName, "vserver_type")
	_cmdb.ZabbixNotCheck = field.NewString(tableName, "zabbix_not_check")
	_cmdb.CreatedAt = field.NewTime(tableName, "created_at")
	_cmdb.UpdatedAt = field.NewTime(tableName, "updated_at")

	_cmdb.fillFieldMap()

	return _cmdb
}

type cmdb struct {
	cmdbDo cmdbDo

	ALL              field.Asterisk
	ID               field.Int64
	Inet             field.String
	CmdbID           field.Int
	Org              field.Int
	OrgPath          field.String
	Type             field.Int
	AgentNotCheck    field.String
	AgentVersion     field.Int
	AppName          field.String
	Area             field.String
	BaoleijiIdentity field.String
	BusinessScope    field.String
	Category         field.String
	CategoryBranch   field.String
	CategoryZone     field.Int
	CiType           field.String
	CmcIP            field.String
	CncIP            field.String
	Comment          field.String
	CostBu           field.String
	CPU              field.String
	CPUCount         field.Int
	CreatedTime      field.String
	CtcIP            field.String
	Env              field.String
	FloatIP          field.Field
	HardDisk         field.String
	HostIP           field.String
	Hostname         field.String
	IBu              field.String
	IDC              field.String
	IPv6             field.Field
	KernelVersion    field.String
	MinionNotCheck   field.String
	NetOpen          field.String
	NicIP            field.String
	NicMAC           field.String
	OpDuty           field.String
	OsVersion        field.String
	PrivateCloudType field.String
	PrivateIP        field.Field
	Rack             field.String
	RAMSize          field.String
	RdDuty           field.String
	SecurityInfo     field.String
	SecurityRisk     field.Int
	ServerRoom       field.String
	ServerSN         field.String
	SSHPort          field.Int
	Status           field.String
	SysDuty          field.String
	Unique           field.String
	UUID             field.String
	VServerType      field.String
	ZabbixNotCheck   field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (c cmdb) Table(newTableName string) *cmdb {
	c.cmdbDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmdb) As(alias string) *cmdb {
	c.cmdbDo.DO = *(c.cmdbDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmdb) updateTableName(table string) *cmdb {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Inet = field.NewString(table, "inet")
	c.CmdbID = field.NewInt(table, "_id")
	c.Org = field.NewInt(table, "_org")
	c.OrgPath = field.NewString(table, "_org_path")
	c.Type = field.NewInt(table, "_type")
	c.AgentNotCheck = field.NewString(table, "agent_not_check")
	c.AgentVersion = field.NewInt(table, "agent_version")
	c.AppName = field.NewString(table, "appname")
	c.Area = field.NewString(table, "area")
	c.BaoleijiIdentity = field.NewString(table, "baoleiji_identity")
	c.BusinessScope = field.NewString(table, "business_scope")
	c.Category = field.NewString(table, "category")
	c.CategoryBranch = field.NewString(table, "category_branch")
	c.CategoryZone = field.NewInt(table, "category_zone")
	c.CiType = field.NewString(table, "ci_type")
	c.CmcIP = field.NewString(table, "cmc_ip")
	c.CncIP = field.NewString(table, "cnc_ip")
	c.Comment = field.NewString(table, "comment")
	c.CostBu = field.NewString(table, "cost_bu")
	c.CPU = field.NewString(table, "cpu")
	c.CPUCount = field.NewInt(table, "cpu_count")
	c.CreatedTime = field.NewString(table, "created_time")
	c.CtcIP = field.NewString(table, "ctc_ip")
	c.Env = field.NewString(table, "env")
	c.FloatIP = field.NewField(table, "float_ip")
	c.HardDisk = field.NewString(table, "harddisk")
	c.HostIP = field.NewString(table, "host_ip")
	c.Hostname = field.NewString(table, "hostname")
	c.IBu = field.NewString(table, "ibu")
	c.IDC = field.NewString(table, "idc")
	c.IPv6 = field.NewField(table, "ipv6")
	c.KernelVersion = field.NewString(table, "kernel_version")
	c.MinionNotCheck = field.NewString(table, "minion_not_check")
	c.NetOpen = field.NewString(table, "net_open")
	c.NicIP = field.NewString(table, "nic_ip")
	c.NicMAC = field.NewString(table, "nic_mac")
	c.OpDuty = field.NewString(table, "op_duty")
	c.OsVersion = field.NewString(table, "os_version")
	c.PrivateCloudType = field.NewString(table, "private_cloud_type")
	c.PrivateIP = field.NewField(table, "private_ip")
	c.Rack = field.NewString(table, "rack")
	c.RAMSize = field.NewString(table, "ram_size")
	c.RdDuty = field.NewString(table, "rd_duty")
	c.SecurityInfo = field.NewString(table, "security_info")
	c.SecurityRisk = field.NewInt(table, "security_risk")
	c.ServerRoom = field.NewString(table, "server_room")
	c.ServerSN = field.NewString(table, "server_sn")
	c.SSHPort = field.NewInt(table, "ssh_port")
	c.Status = field.NewString(table, "status")
	c.SysDuty = field.NewString(table, "sys_duty")
	c.Unique = field.NewString(table, "unique")
	c.UUID = field.NewString(table, "uuid")
	c.VServerType = field.NewString(table, "vserver_type")
	c.ZabbixNotCheck = field.NewString(table, "zabbix_not_check")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cmdb) WithContext(ctx context.Context) *cmdbDo { return c.cmdbDo.WithContext(ctx) }

func (c cmdb) TableName() string { return c.cmdbDo.TableName() }

func (c cmdb) Alias() string { return c.cmdbDo.Alias() }

func (c cmdb) Columns(cols ...field.Expr) gen.Columns { return c.cmdbDo.Columns(cols...) }

func (c *cmdb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmdb) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 57)
	c.fieldMap["id"] = c.ID
	c.fieldMap["inet"] = c.Inet
	c.fieldMap["_id"] = c.CmdbID
	c.fieldMap["_org"] = c.Org
	c.fieldMap["_org_path"] = c.OrgPath
	c.fieldMap["_type"] = c.Type
	c.fieldMap["agent_not_check"] = c.AgentNotCheck
	c.fieldMap["agent_version"] = c.AgentVersion
	c.fieldMap["appname"] = c.AppName
	c.fieldMap["area"] = c.Area
	c.fieldMap["baoleiji_identity"] = c.BaoleijiIdentity
	c.fieldMap["business_scope"] = c.BusinessScope
	c.fieldMap["category"] = c.Category
	c.fieldMap["category_branch"] = c.CategoryBranch
	c.fieldMap["category_zone"] = c.CategoryZone
	c.fieldMap["ci_type"] = c.CiType
	c.fieldMap["cmc_ip"] = c.CmcIP
	c.fieldMap["cnc_ip"] = c.CncIP
	c.fieldMap["comment"] = c.Comment
	c.fieldMap["cost_bu"] = c.CostBu
	c.fieldMap["cpu"] = c.CPU
	c.fieldMap["cpu_count"] = c.CPUCount
	c.fieldMap["created_time"] = c.CreatedTime
	c.fieldMap["ctc_ip"] = c.CtcIP
	c.fieldMap["env"] = c.Env
	c.fieldMap["float_ip"] = c.FloatIP
	c.fieldMap["harddisk"] = c.HardDisk
	c.fieldMap["host_ip"] = c.HostIP
	c.fieldMap["hostname"] = c.Hostname
	c.fieldMap["ibu"] = c.IBu
	c.fieldMap["idc"] = c.IDC
	c.fieldMap["ipv6"] = c.IPv6
	c.fieldMap["kernel_version"] = c.KernelVersion
	c.fieldMap["minion_not_check"] = c.MinionNotCheck
	c.fieldMap["net_open"] = c.NetOpen
	c.fieldMap["nic_ip"] = c.NicIP
	c.fieldMap["nic_mac"] = c.NicMAC
	c.fieldMap["op_duty"] = c.OpDuty
	c.fieldMap["os_version"] = c.OsVersion
	c.fieldMap["private_cloud_type"] = c.PrivateCloudType
	c.fieldMap["private_ip"] = c.PrivateIP
	c.fieldMap["rack"] = c.Rack
	c.fieldMap["ram_size"] = c.RAMSize
	c.fieldMap["rd_duty"] = c.RdDuty
	c.fieldMap["security_info"] = c.SecurityInfo
	c.fieldMap["security_risk"] = c.SecurityRisk
	c.fieldMap["server_room"] = c.ServerRoom
	c.fieldMap["server_sn"] = c.ServerSN
	c.fieldMap["ssh_port"] = c.SSHPort
	c.fieldMap["status"] = c.Status
	c.fieldMap["sys_duty"] = c.SysDuty
	c.fieldMap["unique"] = c.Unique
	c.fieldMap["uuid"] = c.UUID
	c.fieldMap["vserver_type"] = c.VServerType
	c.fieldMap["zabbix_not_check"] = c.ZabbixNotCheck
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cmdb) clone(db *gorm.DB) cmdb {
	c.cmdbDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmdb) replaceDB(db *gorm.DB) cmdb {
	c.cmdbDo.ReplaceDB(db)
	return c
}

type cmdbDo struct{ gen.DO }

func (c cmdbDo) Debug() *cmdbDo {
	return c.withDO(c.DO.Debug())
}

func (c cmdbDo) WithContext(ctx context.Context) *cmdbDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmdbDo) ReadDB() *cmdbDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmdbDo) WriteDB() *cmdbDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmdbDo) Session(config *gorm.Session) *cmdbDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmdbDo) Clauses(conds ...clause.Expression) *cmdbDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmdbDo) Returning(value interface{}, columns ...string) *cmdbDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmdbDo) Not(conds ...gen.Condition) *cmdbDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmdbDo) Or(conds ...gen.Condition) *cmdbDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmdbDo) Select(conds ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmdbDo) Where(conds ...gen.Condition) *cmdbDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmdbDo) Order(conds ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmdbDo) Distinct(cols ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmdbDo) Omit(cols ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmdbDo) Join(table schema.Tabler, on ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmdbDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmdbDo) RightJoin(table schema.Tabler, on ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmdbDo) Group(cols ...field.Expr) *cmdbDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmdbDo) Having(conds ...gen.Condition) *cmdbDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmdbDo) Limit(limit int) *cmdbDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmdbDo) Offset(offset int) *cmdbDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmdbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cmdbDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmdbDo) Unscoped() *cmdbDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmdbDo) Create(values ...*model.Cmdb) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmdbDo) CreateInBatches(values []*model.Cmdb, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmdbDo) Save(values ...*model.Cmdb) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmdbDo) First() (*model.Cmdb, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb), nil
	}
}

func (c cmdbDo) Take() (*model.Cmdb, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb), nil
	}
}

func (c cmdbDo) Last() (*model.Cmdb, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb), nil
	}
}

func (c cmdbDo) Find() ([]*model.Cmdb, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cmdb), err
}

func (c cmdbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cmdb, err error) {
	buf := make([]*model.Cmdb, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmdbDo) FindInBatches(result *[]*model.Cmdb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmdbDo) Attrs(attrs ...field.AssignExpr) *cmdbDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmdbDo) Assign(attrs ...field.AssignExpr) *cmdbDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmdbDo) Joins(fields ...field.RelationField) *cmdbDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmdbDo) Preload(fields ...field.RelationField) *cmdbDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmdbDo) FirstOrInit() (*model.Cmdb, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb), nil
	}
}

func (c cmdbDo) FirstOrCreate() (*model.Cmdb, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cmdb), nil
	}
}

func (c cmdbDo) FindByPage(offset int, limit int) (result []*model.Cmdb, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmdbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmdbDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmdbDo) Delete(models ...*model.Cmdb) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmdbDo) withDO(do gen.Dao) *cmdbDo {
	c.DO = *do.(*gen.DO)
	return c
}
