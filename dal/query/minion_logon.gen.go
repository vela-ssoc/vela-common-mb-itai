// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newMinionLogon(db *gorm.DB, opts ...gen.DOOption) minionLogon {
	_minionLogon := minionLogon{}

	_minionLogon.minionLogonDo.UseDB(db, opts...)
	_minionLogon.minionLogonDo.UseModel(&model.MinionLogon{})

	tableName := _minionLogon.minionLogonDo.TableName()
	_minionLogon.ALL = field.NewAsterisk(tableName)
	_minionLogon.ID = field.NewInt64(tableName, "id")
	_minionLogon.MinionID = field.NewInt64(tableName, "minion_id")
	_minionLogon.Inet = field.NewString(tableName, "inet")
	_minionLogon.User = field.NewString(tableName, "user")
	_minionLogon.Addr = field.NewString(tableName, "addr")
	_minionLogon.Msg = field.NewString(tableName, "msg")
	_minionLogon.Type = field.NewString(tableName, "type")
	_minionLogon.PID = field.NewInt(tableName, "pid")
	_minionLogon.Device = field.NewString(tableName, "device")
	_minionLogon.Process = field.NewString(tableName, "process")
	_minionLogon.LogonAt = field.NewTime(tableName, "logon_at")
	_minionLogon.Ignore = field.NewBool(tableName, "ignore")
	_minionLogon.CreatedAt = field.NewTime(tableName, "created_at")

	_minionLogon.fillFieldMap()

	return _minionLogon
}

type minionLogon struct {
	minionLogonDo minionLogonDo

	ALL       field.Asterisk
	ID        field.Int64
	MinionID  field.Int64
	Inet      field.String
	User      field.String
	Addr      field.String
	Msg       field.String
	Type      field.String
	PID       field.Int
	Device    field.String
	Process   field.String
	LogonAt   field.Time
	Ignore    field.Bool
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m minionLogon) Table(newTableName string) *minionLogon {
	m.minionLogonDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m minionLogon) As(alias string) *minionLogon {
	m.minionLogonDo.DO = *(m.minionLogonDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *minionLogon) updateTableName(table string) *minionLogon {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MinionID = field.NewInt64(table, "minion_id")
	m.Inet = field.NewString(table, "inet")
	m.User = field.NewString(table, "user")
	m.Addr = field.NewString(table, "addr")
	m.Msg = field.NewString(table, "msg")
	m.Type = field.NewString(table, "type")
	m.PID = field.NewInt(table, "pid")
	m.Device = field.NewString(table, "device")
	m.Process = field.NewString(table, "process")
	m.LogonAt = field.NewTime(table, "logon_at")
	m.Ignore = field.NewBool(table, "ignore")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *minionLogon) WithContext(ctx context.Context) *minionLogonDo {
	return m.minionLogonDo.WithContext(ctx)
}

func (m minionLogon) TableName() string { return m.minionLogonDo.TableName() }

func (m minionLogon) Alias() string { return m.minionLogonDo.Alias() }

func (m minionLogon) Columns(cols ...field.Expr) gen.Columns { return m.minionLogonDo.Columns(cols...) }

func (m *minionLogon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *minionLogon) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["id"] = m.ID
	m.fieldMap["minion_id"] = m.MinionID
	m.fieldMap["inet"] = m.Inet
	m.fieldMap["user"] = m.User
	m.fieldMap["addr"] = m.Addr
	m.fieldMap["msg"] = m.Msg
	m.fieldMap["type"] = m.Type
	m.fieldMap["pid"] = m.PID
	m.fieldMap["device"] = m.Device
	m.fieldMap["process"] = m.Process
	m.fieldMap["logon_at"] = m.LogonAt
	m.fieldMap["ignore"] = m.Ignore
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m minionLogon) clone(db *gorm.DB) minionLogon {
	m.minionLogonDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m minionLogon) replaceDB(db *gorm.DB) minionLogon {
	m.minionLogonDo.ReplaceDB(db)
	return m
}

type minionLogonDo struct{ gen.DO }

func (m minionLogonDo) Debug() *minionLogonDo {
	return m.withDO(m.DO.Debug())
}

func (m minionLogonDo) WithContext(ctx context.Context) *minionLogonDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m minionLogonDo) ReadDB() *minionLogonDo {
	return m.Clauses(dbresolver.Read)
}

func (m minionLogonDo) WriteDB() *minionLogonDo {
	return m.Clauses(dbresolver.Write)
}

func (m minionLogonDo) Session(config *gorm.Session) *minionLogonDo {
	return m.withDO(m.DO.Session(config))
}

func (m minionLogonDo) Clauses(conds ...clause.Expression) *minionLogonDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m minionLogonDo) Returning(value interface{}, columns ...string) *minionLogonDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m minionLogonDo) Not(conds ...gen.Condition) *minionLogonDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m minionLogonDo) Or(conds ...gen.Condition) *minionLogonDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m minionLogonDo) Select(conds ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m minionLogonDo) Where(conds ...gen.Condition) *minionLogonDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m minionLogonDo) Order(conds ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m minionLogonDo) Distinct(cols ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m minionLogonDo) Omit(cols ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m minionLogonDo) Join(table schema.Tabler, on ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m minionLogonDo) LeftJoin(table schema.Tabler, on ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m minionLogonDo) RightJoin(table schema.Tabler, on ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m minionLogonDo) Group(cols ...field.Expr) *minionLogonDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m minionLogonDo) Having(conds ...gen.Condition) *minionLogonDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m minionLogonDo) Limit(limit int) *minionLogonDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m minionLogonDo) Offset(offset int) *minionLogonDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m minionLogonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *minionLogonDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m minionLogonDo) Unscoped() *minionLogonDo {
	return m.withDO(m.DO.Unscoped())
}

func (m minionLogonDo) Create(values ...*model.MinionLogon) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m minionLogonDo) CreateInBatches(values []*model.MinionLogon, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m minionLogonDo) Save(values ...*model.MinionLogon) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m minionLogonDo) First() (*model.MinionLogon, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionLogon), nil
	}
}

func (m minionLogonDo) Take() (*model.MinionLogon, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionLogon), nil
	}
}

func (m minionLogonDo) Last() (*model.MinionLogon, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionLogon), nil
	}
}

func (m minionLogonDo) Find() ([]*model.MinionLogon, error) {
	result, err := m.DO.Find()
	return result.([]*model.MinionLogon), err
}

func (m minionLogonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MinionLogon, err error) {
	buf := make([]*model.MinionLogon, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m minionLogonDo) FindInBatches(result *[]*model.MinionLogon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m minionLogonDo) Attrs(attrs ...field.AssignExpr) *minionLogonDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m minionLogonDo) Assign(attrs ...field.AssignExpr) *minionLogonDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m minionLogonDo) Joins(fields ...field.RelationField) *minionLogonDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m minionLogonDo) Preload(fields ...field.RelationField) *minionLogonDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m minionLogonDo) FirstOrInit() (*model.MinionLogon, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionLogon), nil
	}
}

func (m minionLogonDo) FirstOrCreate() (*model.MinionLogon, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionLogon), nil
	}
}

func (m minionLogonDo) FindByPage(offset int, limit int) (result []*model.MinionLogon, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m minionLogonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m minionLogonDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m minionLogonDo) Delete(models ...*model.MinionLogon) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *minionLogonDo) withDO(do gen.Dao) *minionLogonDo {
	m.DO = *do.(*gen.DO)
	return m
}
