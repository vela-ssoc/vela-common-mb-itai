// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newJobReport(db *gorm.DB, opts ...gen.DOOption) jobReport {
	_jobReport := jobReport{}

	_jobReport.jobReportDo.UseDB(db, opts...)
	_jobReport.jobReportDo.UseModel(&model.JobReport{})

	tableName := _jobReport.jobReportDo.TableName()
	_jobReport.ALL = field.NewAsterisk(tableName)
	_jobReport.ID = field.NewInt64(tableName, "id")
	_jobReport.JobID = field.NewInt64(tableName, "job_id")
	_jobReport.MinionID = field.NewInt64(tableName, "minion_id")
	_jobReport.CreatedAt = field.NewTime(tableName, "created_at")
	_jobReport.UpdatedAt = field.NewTime(tableName, "updated_at")

	_jobReport.fillFieldMap()

	return _jobReport
}

type jobReport struct {
	jobReportDo jobReportDo

	ALL       field.Asterisk
	ID        field.Int64
	JobID     field.Int64
	MinionID  field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (j jobReport) Table(newTableName string) *jobReport {
	j.jobReportDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobReport) As(alias string) *jobReport {
	j.jobReportDo.DO = *(j.jobReportDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobReport) updateTableName(table string) *jobReport {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt64(table, "id")
	j.JobID = field.NewInt64(table, "job_id")
	j.MinionID = field.NewInt64(table, "minion_id")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")

	j.fillFieldMap()

	return j
}

func (j *jobReport) WithContext(ctx context.Context) *jobReportDo {
	return j.jobReportDo.WithContext(ctx)
}

func (j jobReport) TableName() string { return j.jobReportDo.TableName() }

func (j jobReport) Alias() string { return j.jobReportDo.Alias() }

func (j jobReport) Columns(cols ...field.Expr) gen.Columns { return j.jobReportDo.Columns(cols...) }

func (j *jobReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobReport) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 5)
	j.fieldMap["id"] = j.ID
	j.fieldMap["job_id"] = j.JobID
	j.fieldMap["minion_id"] = j.MinionID
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
}

func (j jobReport) clone(db *gorm.DB) jobReport {
	j.jobReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobReport) replaceDB(db *gorm.DB) jobReport {
	j.jobReportDo.ReplaceDB(db)
	return j
}

type jobReportDo struct{ gen.DO }

func (j jobReportDo) Debug() *jobReportDo {
	return j.withDO(j.DO.Debug())
}

func (j jobReportDo) WithContext(ctx context.Context) *jobReportDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobReportDo) ReadDB() *jobReportDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobReportDo) WriteDB() *jobReportDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobReportDo) Session(config *gorm.Session) *jobReportDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobReportDo) Clauses(conds ...clause.Expression) *jobReportDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobReportDo) Returning(value interface{}, columns ...string) *jobReportDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobReportDo) Not(conds ...gen.Condition) *jobReportDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobReportDo) Or(conds ...gen.Condition) *jobReportDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobReportDo) Select(conds ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobReportDo) Where(conds ...gen.Condition) *jobReportDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobReportDo) Order(conds ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobReportDo) Distinct(cols ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobReportDo) Omit(cols ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobReportDo) Join(table schema.Tabler, on ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobReportDo) Group(cols ...field.Expr) *jobReportDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobReportDo) Having(conds ...gen.Condition) *jobReportDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobReportDo) Limit(limit int) *jobReportDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobReportDo) Offset(offset int) *jobReportDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *jobReportDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobReportDo) Unscoped() *jobReportDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobReportDo) Create(values ...*model.JobReport) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobReportDo) CreateInBatches(values []*model.JobReport, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobReportDo) Save(values ...*model.JobReport) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobReportDo) First() (*model.JobReport, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobReport), nil
	}
}

func (j jobReportDo) Take() (*model.JobReport, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobReport), nil
	}
}

func (j jobReportDo) Last() (*model.JobReport, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobReport), nil
	}
}

func (j jobReportDo) Find() ([]*model.JobReport, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobReport), err
}

func (j jobReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobReport, err error) {
	buf := make([]*model.JobReport, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobReportDo) FindInBatches(result *[]*model.JobReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobReportDo) Attrs(attrs ...field.AssignExpr) *jobReportDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobReportDo) Assign(attrs ...field.AssignExpr) *jobReportDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobReportDo) Joins(fields ...field.RelationField) *jobReportDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobReportDo) Preload(fields ...field.RelationField) *jobReportDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobReportDo) FirstOrInit() (*model.JobReport, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobReport), nil
	}
}

func (j jobReportDo) FirstOrCreate() (*model.JobReport, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobReport), nil
	}
}

func (j jobReportDo) FindByPage(offset int, limit int) (result []*model.JobReport, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobReportDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobReportDo) Delete(models ...*model.JobReport) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobReportDo) withDO(do gen.Dao) *jobReportDo {
	j.DO = *do.(*gen.DO)
	return j
}
