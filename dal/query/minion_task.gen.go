// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newMinionTask(db *gorm.DB, opts ...gen.DOOption) minionTask {
	_minionTask := minionTask{}

	_minionTask.minionTaskDo.UseDB(db, opts...)
	_minionTask.minionTaskDo.UseModel(&model.MinionTask{})

	tableName := _minionTask.minionTaskDo.TableName()
	_minionTask.ALL = field.NewAsterisk(tableName)
	_minionTask.ID = field.NewInt64(tableName, "id")
	_minionTask.SubstanceID = field.NewInt64(tableName, "substance_id")
	_minionTask.MinionID = field.NewInt64(tableName, "minion_id")
	_minionTask.Inet = field.NewString(tableName, "inet")
	_minionTask.Dialect = field.NewBool(tableName, "dialect")
	_minionTask.Name = field.NewString(tableName, "name")
	_minionTask.Link = field.NewString(tableName, "link")
	_minionTask.Status = field.NewString(tableName, "status")
	_minionTask.Hash = field.NewString(tableName, "hash")
	_minionTask.From = field.NewString(tableName, "from")
	_minionTask.Uptime = field.NewTime(tableName, "uptime")
	_minionTask.Failed = field.NewBool(tableName, "failed")
	_minionTask.Cause = field.NewString(tableName, "cause")
	_minionTask.Runners = field.NewField(tableName, "runners")
	_minionTask.CreatedAt = field.NewTime(tableName, "created_at")

	_minionTask.fillFieldMap()

	return _minionTask
}

type minionTask struct {
	minionTaskDo minionTaskDo

	ALL         field.Asterisk
	ID          field.Int64
	SubstanceID field.Int64
	MinionID    field.Int64
	Inet        field.String
	Dialect     field.Bool
	Name        field.String
	Link        field.String
	Status      field.String
	Hash        field.String
	From        field.String
	Uptime      field.Time
	Failed      field.Bool
	Cause       field.String
	Runners     field.Field
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (m minionTask) Table(newTableName string) *minionTask {
	m.minionTaskDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m minionTask) As(alias string) *minionTask {
	m.minionTaskDo.DO = *(m.minionTaskDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *minionTask) updateTableName(table string) *minionTask {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.SubstanceID = field.NewInt64(table, "substance_id")
	m.MinionID = field.NewInt64(table, "minion_id")
	m.Inet = field.NewString(table, "inet")
	m.Dialect = field.NewBool(table, "dialect")
	m.Name = field.NewString(table, "name")
	m.Link = field.NewString(table, "link")
	m.Status = field.NewString(table, "status")
	m.Hash = field.NewString(table, "hash")
	m.From = field.NewString(table, "from")
	m.Uptime = field.NewTime(table, "uptime")
	m.Failed = field.NewBool(table, "failed")
	m.Cause = field.NewString(table, "cause")
	m.Runners = field.NewField(table, "runners")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *minionTask) WithContext(ctx context.Context) *minionTaskDo {
	return m.minionTaskDo.WithContext(ctx)
}

func (m minionTask) TableName() string { return m.minionTaskDo.TableName() }

func (m minionTask) Alias() string { return m.minionTaskDo.Alias() }

func (m minionTask) Columns(cols ...field.Expr) gen.Columns { return m.minionTaskDo.Columns(cols...) }

func (m *minionTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *minionTask) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["id"] = m.ID
	m.fieldMap["substance_id"] = m.SubstanceID
	m.fieldMap["minion_id"] = m.MinionID
	m.fieldMap["inet"] = m.Inet
	m.fieldMap["dialect"] = m.Dialect
	m.fieldMap["name"] = m.Name
	m.fieldMap["link"] = m.Link
	m.fieldMap["status"] = m.Status
	m.fieldMap["hash"] = m.Hash
	m.fieldMap["from"] = m.From
	m.fieldMap["uptime"] = m.Uptime
	m.fieldMap["failed"] = m.Failed
	m.fieldMap["cause"] = m.Cause
	m.fieldMap["runners"] = m.Runners
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m minionTask) clone(db *gorm.DB) minionTask {
	m.minionTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m minionTask) replaceDB(db *gorm.DB) minionTask {
	m.minionTaskDo.ReplaceDB(db)
	return m
}

type minionTaskDo struct{ gen.DO }

func (m minionTaskDo) Debug() *minionTaskDo {
	return m.withDO(m.DO.Debug())
}

func (m minionTaskDo) WithContext(ctx context.Context) *minionTaskDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m minionTaskDo) ReadDB() *minionTaskDo {
	return m.Clauses(dbresolver.Read)
}

func (m minionTaskDo) WriteDB() *minionTaskDo {
	return m.Clauses(dbresolver.Write)
}

func (m minionTaskDo) Session(config *gorm.Session) *minionTaskDo {
	return m.withDO(m.DO.Session(config))
}

func (m minionTaskDo) Clauses(conds ...clause.Expression) *minionTaskDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m minionTaskDo) Returning(value interface{}, columns ...string) *minionTaskDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m minionTaskDo) Not(conds ...gen.Condition) *minionTaskDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m minionTaskDo) Or(conds ...gen.Condition) *minionTaskDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m minionTaskDo) Select(conds ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m minionTaskDo) Where(conds ...gen.Condition) *minionTaskDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m minionTaskDo) Order(conds ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m minionTaskDo) Distinct(cols ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m minionTaskDo) Omit(cols ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m minionTaskDo) Join(table schema.Tabler, on ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m minionTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m minionTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m minionTaskDo) Group(cols ...field.Expr) *minionTaskDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m minionTaskDo) Having(conds ...gen.Condition) *minionTaskDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m minionTaskDo) Limit(limit int) *minionTaskDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m minionTaskDo) Offset(offset int) *minionTaskDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m minionTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *minionTaskDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m minionTaskDo) Unscoped() *minionTaskDo {
	return m.withDO(m.DO.Unscoped())
}

func (m minionTaskDo) Create(values ...*model.MinionTask) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m minionTaskDo) CreateInBatches(values []*model.MinionTask, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m minionTaskDo) Save(values ...*model.MinionTask) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m minionTaskDo) First() (*model.MinionTask, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionTask), nil
	}
}

func (m minionTaskDo) Take() (*model.MinionTask, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionTask), nil
	}
}

func (m minionTaskDo) Last() (*model.MinionTask, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionTask), nil
	}
}

func (m minionTaskDo) Find() ([]*model.MinionTask, error) {
	result, err := m.DO.Find()
	return result.([]*model.MinionTask), err
}

func (m minionTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MinionTask, err error) {
	buf := make([]*model.MinionTask, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m minionTaskDo) FindInBatches(result *[]*model.MinionTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m minionTaskDo) Attrs(attrs ...field.AssignExpr) *minionTaskDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m minionTaskDo) Assign(attrs ...field.AssignExpr) *minionTaskDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m minionTaskDo) Joins(fields ...field.RelationField) *minionTaskDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m minionTaskDo) Preload(fields ...field.RelationField) *minionTaskDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m minionTaskDo) FirstOrInit() (*model.MinionTask, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionTask), nil
	}
}

func (m minionTaskDo) FirstOrCreate() (*model.MinionTask, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionTask), nil
	}
}

func (m minionTaskDo) FindByPage(offset int, limit int) (result []*model.MinionTask, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m minionTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m minionTaskDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m minionTaskDo) Delete(models ...*model.MinionTask) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *minionTaskDo) withDO(do gen.Dao) *minionTaskDo {
	m.DO = *do.(*gen.DO)
	return m
}
