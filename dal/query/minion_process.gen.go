// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/vela-ssoc/vela-common-mb-itai/dal/model"
)

func newMinionProcess(db *gorm.DB, opts ...gen.DOOption) minionProcess {
	_minionProcess := minionProcess{}

	_minionProcess.minionProcessDo.UseDB(db, opts...)
	_minionProcess.minionProcessDo.UseModel(&model.MinionProcess{})

	tableName := _minionProcess.minionProcessDo.TableName()
	_minionProcess.ALL = field.NewAsterisk(tableName)
	_minionProcess.ID = field.NewInt64(tableName, "id")
	_minionProcess.MinionID = field.NewInt64(tableName, "minion_id")
	_minionProcess.Inet = field.NewString(tableName, "inet")
	_minionProcess.Name = field.NewString(tableName, "name")
	_minionProcess.State = field.NewString(tableName, "state")
	_minionProcess.Pid = field.NewInt(tableName, "pid")
	_minionProcess.Ppid = field.NewInt(tableName, "ppid")
	_minionProcess.Pgid = field.NewUint32(tableName, "pgid")
	_minionProcess.Cmdline = field.NewString(tableName, "cmdline")
	_minionProcess.Username = field.NewString(tableName, "username")
	_minionProcess.Cwd = field.NewString(tableName, "cwd")
	_minionProcess.Executable = field.NewString(tableName, "executable")
	_minionProcess.Args = field.NewField(tableName, "args")
	_minionProcess.UserTicks = field.NewUint64(tableName, "user_ticks")
	_minionProcess.TotalPct = field.NewFloat64(tableName, "total_pct")
	_minionProcess.TotalNormPct = field.NewFloat64(tableName, "total_norm_pct")
	_minionProcess.SystemTicks = field.NewUint64(tableName, "system_ticks")
	_minionProcess.TotalTicks = field.NewUint64(tableName, "total_ticks")
	_minionProcess.StartTime = field.NewString(tableName, "start_time")
	_minionProcess.MemSize = field.NewUint64(tableName, "mem_size")
	_minionProcess.RssBytes = field.NewUint64(tableName, "rss_bytes")
	_minionProcess.RssPct = field.NewFloat64(tableName, "rss_pct")
	_minionProcess.Share = field.NewUint64(tableName, "share")
	_minionProcess.Checksum = field.NewString(tableName, "checksum")
	_minionProcess.CreatedTime = field.NewTime(tableName, "created_time")
	_minionProcess.ModifiedAt = field.NewTime(tableName, "modified_at")
	_minionProcess.CreatedAt = field.NewTime(tableName, "created_at")
	_minionProcess.UpdatedAt = field.NewTime(tableName, "updated_at")

	_minionProcess.fillFieldMap()

	return _minionProcess
}

type minionProcess struct {
	minionProcessDo minionProcessDo

	ALL          field.Asterisk
	ID           field.Int64
	MinionID     field.Int64
	Inet         field.String
	Name         field.String
	State        field.String
	Pid          field.Int
	Ppid         field.Int
	Pgid         field.Uint32
	Cmdline      field.String
	Username     field.String
	Cwd          field.String
	Executable   field.String
	Args         field.Field
	UserTicks    field.Uint64
	TotalPct     field.Float64
	TotalNormPct field.Float64
	SystemTicks  field.Uint64
	TotalTicks   field.Uint64
	StartTime    field.String
	MemSize      field.Uint64
	RssBytes     field.Uint64
	RssPct       field.Float64
	Share        field.Uint64
	Checksum     field.String
	CreatedTime  field.Time
	ModifiedAt   field.Time
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (m minionProcess) Table(newTableName string) *minionProcess {
	m.minionProcessDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m minionProcess) As(alias string) *minionProcess {
	m.minionProcessDo.DO = *(m.minionProcessDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *minionProcess) updateTableName(table string) *minionProcess {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MinionID = field.NewInt64(table, "minion_id")
	m.Inet = field.NewString(table, "inet")
	m.Name = field.NewString(table, "name")
	m.State = field.NewString(table, "state")
	m.Pid = field.NewInt(table, "pid")
	m.Ppid = field.NewInt(table, "ppid")
	m.Pgid = field.NewUint32(table, "pgid")
	m.Cmdline = field.NewString(table, "cmdline")
	m.Username = field.NewString(table, "username")
	m.Cwd = field.NewString(table, "cwd")
	m.Executable = field.NewString(table, "executable")
	m.Args = field.NewField(table, "args")
	m.UserTicks = field.NewUint64(table, "user_ticks")
	m.TotalPct = field.NewFloat64(table, "total_pct")
	m.TotalNormPct = field.NewFloat64(table, "total_norm_pct")
	m.SystemTicks = field.NewUint64(table, "system_ticks")
	m.TotalTicks = field.NewUint64(table, "total_ticks")
	m.StartTime = field.NewString(table, "start_time")
	m.MemSize = field.NewUint64(table, "mem_size")
	m.RssBytes = field.NewUint64(table, "rss_bytes")
	m.RssPct = field.NewFloat64(table, "rss_pct")
	m.Share = field.NewUint64(table, "share")
	m.Checksum = field.NewString(table, "checksum")
	m.CreatedTime = field.NewTime(table, "created_time")
	m.ModifiedAt = field.NewTime(table, "modified_at")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *minionProcess) WithContext(ctx context.Context) *minionProcessDo {
	return m.minionProcessDo.WithContext(ctx)
}

func (m minionProcess) TableName() string { return m.minionProcessDo.TableName() }

func (m minionProcess) Alias() string { return m.minionProcessDo.Alias() }

func (m minionProcess) Columns(cols ...field.Expr) gen.Columns {
	return m.minionProcessDo.Columns(cols...)
}

func (m *minionProcess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *minionProcess) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 28)
	m.fieldMap["id"] = m.ID
	m.fieldMap["minion_id"] = m.MinionID
	m.fieldMap["inet"] = m.Inet
	m.fieldMap["name"] = m.Name
	m.fieldMap["state"] = m.State
	m.fieldMap["pid"] = m.Pid
	m.fieldMap["ppid"] = m.Ppid
	m.fieldMap["pgid"] = m.Pgid
	m.fieldMap["cmdline"] = m.Cmdline
	m.fieldMap["username"] = m.Username
	m.fieldMap["cwd"] = m.Cwd
	m.fieldMap["executable"] = m.Executable
	m.fieldMap["args"] = m.Args
	m.fieldMap["user_ticks"] = m.UserTicks
	m.fieldMap["total_pct"] = m.TotalPct
	m.fieldMap["total_norm_pct"] = m.TotalNormPct
	m.fieldMap["system_ticks"] = m.SystemTicks
	m.fieldMap["total_ticks"] = m.TotalTicks
	m.fieldMap["start_time"] = m.StartTime
	m.fieldMap["mem_size"] = m.MemSize
	m.fieldMap["rss_bytes"] = m.RssBytes
	m.fieldMap["rss_pct"] = m.RssPct
	m.fieldMap["share"] = m.Share
	m.fieldMap["checksum"] = m.Checksum
	m.fieldMap["created_time"] = m.CreatedTime
	m.fieldMap["modified_at"] = m.ModifiedAt
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m minionProcess) clone(db *gorm.DB) minionProcess {
	m.minionProcessDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m minionProcess) replaceDB(db *gorm.DB) minionProcess {
	m.minionProcessDo.ReplaceDB(db)
	return m
}

type minionProcessDo struct{ gen.DO }

func (m minionProcessDo) Debug() *minionProcessDo {
	return m.withDO(m.DO.Debug())
}

func (m minionProcessDo) WithContext(ctx context.Context) *minionProcessDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m minionProcessDo) ReadDB() *minionProcessDo {
	return m.Clauses(dbresolver.Read)
}

func (m minionProcessDo) WriteDB() *minionProcessDo {
	return m.Clauses(dbresolver.Write)
}

func (m minionProcessDo) Session(config *gorm.Session) *minionProcessDo {
	return m.withDO(m.DO.Session(config))
}

func (m minionProcessDo) Clauses(conds ...clause.Expression) *minionProcessDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m minionProcessDo) Returning(value interface{}, columns ...string) *minionProcessDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m minionProcessDo) Not(conds ...gen.Condition) *minionProcessDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m minionProcessDo) Or(conds ...gen.Condition) *minionProcessDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m minionProcessDo) Select(conds ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m minionProcessDo) Where(conds ...gen.Condition) *minionProcessDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m minionProcessDo) Order(conds ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m minionProcessDo) Distinct(cols ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m minionProcessDo) Omit(cols ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m minionProcessDo) Join(table schema.Tabler, on ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m minionProcessDo) LeftJoin(table schema.Tabler, on ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m minionProcessDo) RightJoin(table schema.Tabler, on ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m minionProcessDo) Group(cols ...field.Expr) *minionProcessDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m minionProcessDo) Having(conds ...gen.Condition) *minionProcessDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m minionProcessDo) Limit(limit int) *minionProcessDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m minionProcessDo) Offset(offset int) *minionProcessDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m minionProcessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *minionProcessDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m minionProcessDo) Unscoped() *minionProcessDo {
	return m.withDO(m.DO.Unscoped())
}

func (m minionProcessDo) Create(values ...*model.MinionProcess) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m minionProcessDo) CreateInBatches(values []*model.MinionProcess, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m minionProcessDo) Save(values ...*model.MinionProcess) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m minionProcessDo) First() (*model.MinionProcess, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionProcess), nil
	}
}

func (m minionProcessDo) Take() (*model.MinionProcess, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionProcess), nil
	}
}

func (m minionProcessDo) Last() (*model.MinionProcess, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionProcess), nil
	}
}

func (m minionProcessDo) Find() ([]*model.MinionProcess, error) {
	result, err := m.DO.Find()
	return result.([]*model.MinionProcess), err
}

func (m minionProcessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MinionProcess, err error) {
	buf := make([]*model.MinionProcess, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m minionProcessDo) FindInBatches(result *[]*model.MinionProcess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m minionProcessDo) Attrs(attrs ...field.AssignExpr) *minionProcessDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m minionProcessDo) Assign(attrs ...field.AssignExpr) *minionProcessDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m minionProcessDo) Joins(fields ...field.RelationField) *minionProcessDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m minionProcessDo) Preload(fields ...field.RelationField) *minionProcessDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m minionProcessDo) FirstOrInit() (*model.MinionProcess, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionProcess), nil
	}
}

func (m minionProcessDo) FirstOrCreate() (*model.MinionProcess, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MinionProcess), nil
	}
}

func (m minionProcessDo) FindByPage(offset int, limit int) (result []*model.MinionProcess, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m minionProcessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m minionProcessDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m minionProcessDo) Delete(models ...*model.MinionProcess) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *minionProcessDo) withDO(do gen.Dao) *minionProcessDo {
	m.DO = *do.(*gen.DO)
	return m
}
